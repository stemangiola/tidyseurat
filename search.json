[{"path":"/articles/introduction.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Overview of the tidyseurat package","text":"tidyseurat provides bridge Seurat single-cell package (Butler et al. 2018; Stuart et al. 2019) tidyverse (Wickham et al. 2019). creates invisible layer enables viewing Seurat object tidyverse tibble, provides Seurat-compatible dplyr, tidyr, ggplot plotly functions.","code":""},{"path":[]},{"path":"/articles/introduction.html","id":"installation","dir":"Articles","previous_headings":"Introduction","what":"Installation","title":"Overview of the tidyseurat package","text":"CRAN Github (development)","code":"install.packages(\"tidyseurat\") devtools::install_github(\"stemangiola/tidyseurat\") library(dplyr) library(tidyr) library(purrr) library(magrittr) library(ggplot2) library(Seurat) library(tidyseurat)"},{"path":"/articles/introduction.html","id":"create-tidyseurat-the-best-of-both-worlds","dir":"Articles","previous_headings":"Introduction","what":"Create tidyseurat, the best of both worlds!","title":"Overview of the tidyseurat package","text":"seurat object evaluated tibble. fully compatible Seurat tidyverse APIs. looks like tibble Seurat object ","code":"pbmc_small = SeuratObject::pbmc_small pbmc_small ## # A Seurat-tibble abstraction: 80 × 15 ## # Features=230 | Cells=80 | Active assay=RNA | Assays=RNA ##    .cell orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups ##    <chr> <fct>           <dbl>        <int> <fct>           <fct>         <chr>  ##  1 ATGC… SeuratPro…         70           47 0               A             g2     ##  2 CATG… SeuratPro…         85           52 0               A             g1     ##  3 GAAC… SeuratPro…         87           50 1               B             g2     ##  4 TGAC… SeuratPro…        127           56 0               A             g2     ##  5 AGTC… SeuratPro…        173           53 0               A             g2     ##  6 TCTG… SeuratPro…         70           48 0               A             g1     ##  7 TGGT… SeuratPro…         64           36 0               A             g1     ##  8 GCAG… SeuratPro…         72           45 0               A             g1     ##  9 GATA… SeuratPro…         52           36 0               A             g1     ## 10 AATG… SeuratPro…        100           41 0               A             g1     ## # ℹ 70 more rows ## # ℹ 8 more variables: RNA_snn_res.1 <fct>, PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, ## #   PC_4 <dbl>, PC_5 <dbl>, tSNE_1 <dbl>, tSNE_2 <dbl> pbmc_small@assays ## $RNA ## Assay data with 230 features for 80 cells ## Top 10 variable features: ##  PPBP, IGLL5, VDAC3, CD1C, AKR1C3, PF4, MYL9, GNLY, TREML1, CA2"},{"path":"/articles/introduction.html","id":"preliminary-plots","dir":"Articles","previous_headings":"","what":"Preliminary plots","title":"Overview of the tidyseurat package","text":"Set colours theme plots. can treat pbmc_small effectively normal tibble plotting. plot number features per cell.  plot total features per cell.  plot abundance two features group.","code":"# Use colourblind-friendly colours friendly_cols <- c(\"#88CCEE\", \"#CC6677\", \"#DDCC77\", \"#117733\", \"#332288\", \"#AA4499\", \"#44AA99\", \"#999933\", \"#882255\", \"#661100\", \"#6699CC\")  # Set theme my_theme <-   list(     scale_fill_manual(values = friendly_cols),     scale_color_manual(values = friendly_cols),     theme_bw() +       theme(         panel.border = element_blank(),         axis.line = element_line(),         panel.grid.major = element_line(size = 0.2),         panel.grid.minor = element_line(size = 0.1),         text = element_text(size = 12),         legend.position = \"bottom\",         aspect.ratio = 1,         strip.background = element_blank(),         axis.title.x = element_text(margin = margin(t = 10, r = 10, b = 10, l = 10)),         axis.title.y = element_text(margin = margin(t = 10, r = 10, b = 10, l = 10))       )   ) pbmc_small %>%   ggplot(aes(nFeature_RNA, fill = groups)) +   geom_histogram() +   my_theme pbmc_small %>%   ggplot(aes(groups, nCount_RNA, fill = groups)) +   geom_boxplot(outlier.shape = NA) +   geom_jitter(width = 0.1) +   my_theme pbmc_small %>%   join_features(features = c(\"HLA-DRA\", \"LYZ\"), shape = \"long\") %>%   ggplot(aes(groups, .abundance_RNA + 1, fill = groups)) +   geom_boxplot(outlier.shape = NA) +   geom_jitter(aes(size = nCount_RNA), alpha = 0.5, width = 0.2) +   scale_y_log10() +   my_theme"},{"path":"/articles/introduction.html","id":"preprocess-the-dataset","dir":"Articles","previous_headings":"","what":"Preprocess the dataset","title":"Overview of the tidyseurat package","text":"Also can treat object Seurat object proceed data processing. tool included tidyseurat collection, can use as_tibble permanently convert tidyseurat tibble.","code":"pbmc_small_pca <-   pbmc_small %>%   SCTransform(verbose = FALSE) %>%   FindVariableFeatures(verbose = FALSE) %>%   RunPCA(verbose = FALSE)  pbmc_small_pca ## # A Seurat-tibble abstraction: 80 × 17 ## # Features=220 | Cells=80 | Active assay=SCT | Assays=RNA, SCT ##    .cell orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups ##    <chr> <fct>           <dbl>        <int> <fct>           <fct>         <chr>  ##  1 ATGC… SeuratPro…         70           47 0               A             g2     ##  2 CATG… SeuratPro…         85           52 0               A             g1     ##  3 GAAC… SeuratPro…         87           50 1               B             g2     ##  4 TGAC… SeuratPro…        127           56 0               A             g2     ##  5 AGTC… SeuratPro…        173           53 0               A             g2     ##  6 TCTG… SeuratPro…         70           48 0               A             g1     ##  7 TGGT… SeuratPro…         64           36 0               A             g1     ##  8 GCAG… SeuratPro…         72           45 0               A             g1     ##  9 GATA… SeuratPro…         52           36 0               A             g1     ## 10 AATG… SeuratPro…        100           41 0               A             g1     ## # ℹ 70 more rows ## # ℹ 10 more variables: RNA_snn_res.1 <fct>, nCount_SCT <dbl>, ## #   nFeature_SCT <int>, PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, PC_4 <dbl>, ## #   PC_5 <dbl>, tSNE_1 <dbl>, tSNE_2 <dbl> pbmc_small_pca %>%   as_tibble() %>%   select(contains(\"PC\"), everything()) %>%   GGally::ggpairs(columns = 1:5, ggplot2::aes(colour = groups)) +   my_theme"},{"path":"/articles/introduction.html","id":"identify-clusters","dir":"Articles","previous_headings":"","what":"Identify clusters","title":"Overview of the tidyseurat package","text":"proceed cluster identification Seurat. Now can interrogate object regular tibble data frame. can identify cluster markers using Seurat.","code":"pbmc_small_cluster <-   pbmc_small_pca %>%   FindNeighbors(verbose = FALSE) %>%   FindClusters(method = \"igraph\", verbose = FALSE)  pbmc_small_cluster ## # A Seurat-tibble abstraction: 80 × 19 ## # Features=220 | Cells=80 | Active assay=SCT | Assays=RNA, SCT ##    .cell orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups ##    <chr> <fct>           <dbl>        <int> <fct>           <fct>         <chr>  ##  1 ATGC… SeuratPro…         70           47 0               A             g2     ##  2 CATG… SeuratPro…         85           52 0               A             g1     ##  3 GAAC… SeuratPro…         87           50 1               B             g2     ##  4 TGAC… SeuratPro…        127           56 0               A             g2     ##  5 AGTC… SeuratPro…        173           53 0               A             g2     ##  6 TCTG… SeuratPro…         70           48 0               A             g1     ##  7 TGGT… SeuratPro…         64           36 0               A             g1     ##  8 GCAG… SeuratPro…         72           45 0               A             g1     ##  9 GATA… SeuratPro…         52           36 0               A             g1     ## 10 AATG… SeuratPro…        100           41 0               A             g1     ## # ℹ 70 more rows ## # ℹ 12 more variables: RNA_snn_res.1 <fct>, nCount_SCT <dbl>, ## #   nFeature_SCT <int>, SCT_snn_res.0.8 <fct>, seurat_clusters <fct>, ## #   PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, PC_4 <dbl>, PC_5 <dbl>, tSNE_1 <dbl>, ## #   tSNE_2 <dbl> pbmc_small_cluster %>%   count(groups, seurat_clusters) ## # A tibble: 6 × 3 ##   groups seurat_clusters     n ##   <chr>  <fct>           <int> ## 1 g1     0                  23 ## 2 g1     1                  17 ## 3 g1     2                   4 ## 4 g2     0                  17 ## 5 g2     1                  13 ## 6 g2     2                   6 # Identify top 10 markers per cluster markers <-   pbmc_small_cluster %>%   FindAllMarkers(only.pos = TRUE, min.pct = 0.25, thresh.use = 0.25) %>%   group_by(cluster) %>%   top_n(10, avg_log2FC)  # Plot heatmap pbmc_small_cluster %>%   DoHeatmap(     features = markers$gene,     group.colors = friendly_cols   )"},{"path":"/articles/introduction.html","id":"reduce-dimensions","dir":"Articles","previous_headings":"","what":"Reduce dimensions","title":"Overview of the tidyseurat package","text":"can calculate first 3 UMAP dimensions using Seurat framework. can plot using 3D plot using plotly.","code":"pbmc_small_UMAP <-   pbmc_small_cluster %>%   RunUMAP(reduction = \"pca\", dims = 1:15, n.components = 3L) pbmc_small_UMAP %>%   plot_ly(     x = ~`UMAP_1`,     y = ~`UMAP_2`,     z = ~`UMAP_3`,     color = ~seurat_clusters,     colors = friendly_cols[1:4]   )"},{"path":"/articles/introduction.html","id":"cell-type-prediction","dir":"Articles","previous_headings":"Reduce dimensions","what":"Cell type prediction","title":"Overview of the tidyseurat package","text":"can infer cell type identities using SingleR (Aran et al. 2019) manipulate output using tidyverse. can easily summarise results. example, can see cell type classification overlaps cluster classification. can easily reshape data building information-rich faceted plots. can easily plot gene correlation per cell category, adding multi-layer annotations.","code":"# Get cell type reference data blueprint <- celldex::BlueprintEncodeData()  # Infer cell identities cell_type_df <-   GetAssayData(pbmc_small_UMAP, slot = 'counts', assay = \"SCT\") %>%   log1p() %>%   Matrix::Matrix(sparse = TRUE) %>%   SingleR::SingleR(     ref = blueprint,     labels = blueprint$label.main,     method = \"single\"   ) %>%   as.data.frame() %>%   as_tibble(rownames = \"cell\") %>%   select(cell, first.labels) # Join UMAP and cell type info pbmc_small_cell_type <-   pbmc_small_UMAP %>%   left_join(cell_type_df, by = \"cell\")  # Reorder columns pbmc_small_cell_type %>%   select(cell, first.labels, everything()) pbmc_small_cell_type %>%   count(seurat_clusters, first.labels) pbmc_small_cell_type %>%    # Reshape and add classifier column   pivot_longer(     cols = c(seurat_clusters, first.labels),     names_to = \"classifier\", values_to = \"label\"   ) %>%    # UMAP plots for cell type and cluster   ggplot(aes(UMAP_1, UMAP_2, color = label)) +   geom_point() +   facet_wrap(~classifier) +   my_theme pbmc_small_cell_type %>%    # Add some mitochondrial abundance values   mutate(mitochondrial = rnorm(n())) %>%    # Plot correlation   join_features(features = c(\"CST3\", \"LYZ\"), shape = \"wide\") %>%   ggplot(aes(CST3 + 1, LYZ + 1, color = groups, size = mitochondrial)) +   geom_point() +   facet_wrap(~first.labels, scales = \"free\") +   scale_x_log10() +   scale_y_log10() +   my_theme"},{"path":"/articles/introduction.html","id":"nested-analyses","dir":"Articles","previous_headings":"","what":"Nested analyses","title":"Overview of the tidyseurat package","text":"powerful tool can use tidyseurat nest. can easily perform independent analyses subsets dataset. First classify cell types lymphoid myeloid; , nest based new classification Now can independently lymphoid myeloid subsets () find variable features, (ii) reduce dimensions, (iii) cluster using tidyverse Seurat seamlessly. Now can unnest plot new classification.","code":"pbmc_small_nested <-   pbmc_small_cell_type %>%   filter(first.labels != \"Erythrocytes\") %>%   mutate(cell_class = if_else(`first.labels` %in% c(\"Macrophages\", \"Monocytes\"), \"myeloid\", \"lymphoid\")) %>%   nest(data = -cell_class)  pbmc_small_nested pbmc_small_nested_reanalysed <-   pbmc_small_nested %>%   mutate(data = map(     data, ~ .x %>%       FindVariableFeatures(verbose = FALSE) %>%       RunPCA(npcs = 10, verbose = FALSE) %>%       FindNeighbors(verbose = FALSE) %>%       FindClusters(method = \"igraph\", verbose = FALSE) %>%       RunUMAP(reduction = \"pca\", dims = 1:10, n.components = 3L, verbose = FALSE)   ))  pbmc_small_nested_reanalysed pbmc_small_nested_reanalysed %>%    # Convert to tibble otherwise Seurat drops reduced dimensions when unifying data sets.   mutate(data = map(data, ~ .x %>% as_tibble())) %>%   unnest(data) %>%    # Define unique clusters   unite(\"cluster\", c(cell_class, seurat_clusters), remove = FALSE) %>%    # Plotting   ggplot(aes(UMAP_1, UMAP_2, color = cluster)) +   geom_point() +   facet_wrap(~cell_class) +   my_theme"},{"path":"/articles/introduction.html","id":"aggregating-cells","dir":"Articles","previous_headings":"","what":"Aggregating cells","title":"Overview of the tidyseurat package","text":"Sometimes, necessary aggregate gene-transcript abundance group cells single value. example, comparing groups cells across different samples fixed-effect models. tidyseurat, cell aggregation can achieved using aggregate_cells function.","code":"pbmc_small %>%   aggregate_cells(groups, assays = \"RNA\")"},{"path":"/articles/introduction.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Overview of the tidyseurat package","text":"","code":"sessionInfo() ## R version 4.5.1 (2025-06-13) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 24.04.3 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ##  [1] future_1.67.0      tidyseurat_0.8.4   ttservice_0.5.3    Seurat_5.3.0       ##  [5] SeuratObject_5.2.0 sp_2.2-0           ggplot2_4.0.0      magrittr_2.0.4     ##  [9] purrr_1.1.0        tidyr_1.3.1        dplyr_1.1.4        knitr_1.50         ##  ## loaded via a namespace (and not attached): ##   [1] deldir_2.0-4           pbapply_1.7-4          gridExtra_2.3          ##   [4] rlang_1.1.6            RcppAnnoy_0.0.22       otel_0.2.0             ##   [7] spatstat.geom_3.6-0    matrixStats_1.5.0      ggridges_0.5.7         ##  [10] compiler_4.5.1         png_0.1-8              systemfonts_1.3.1      ##  [13] vctrs_0.6.5            reshape2_1.4.4         stringr_1.5.2          ##  [16] pkgconfig_2.0.3        fastmap_1.2.0          labeling_0.4.3         ##  [19] utf8_1.2.6             promises_1.4.0         rmarkdown_2.30         ##  [22] ragg_1.5.0             xfun_0.53              cachem_1.1.0           ##  [25] jsonlite_2.0.0         goftest_1.2-3          later_1.4.4            ##  [28] spatstat.utils_3.2-0   irlba_2.3.5.1          parallel_4.5.1         ##  [31] cluster_2.1.8.1        R6_2.6.1               ica_1.0-3              ##  [34] spatstat.data_3.1-9    bslib_0.9.0            stringi_1.8.7          ##  [37] RColorBrewer_1.1-3     GGally_2.4.0           reticulate_1.44.0      ##  [40] spatstat.univar_3.1-4  parallelly_1.45.1      lmtest_0.9-40          ##  [43] jquerylib_0.1.4        scattermore_1.2        Rcpp_1.1.0             ##  [46] tensor_1.5.1           future.apply_1.20.0    zoo_1.8-14             ##  [49] sctransform_0.4.2      httpuv_1.6.16          Matrix_1.7-4           ##  [52] splines_4.5.1          igraph_2.2.1           tidyselect_1.2.1       ##  [55] abind_1.4-8            yaml_2.3.10            spatstat.random_3.4-2  ##  [58] spatstat.explore_3.5-3 codetools_0.2-20       miniUI_0.1.2           ##  [61] listenv_0.9.1          lattice_0.22-7         tibble_3.3.0           ##  [64] plyr_1.8.9             shiny_1.11.1           withr_3.0.2            ##  [67] S7_0.2.0               ROCR_1.0-11            evaluate_1.0.5         ##  [70] Rtsne_0.17             fastDummies_1.7.5      desc_1.4.3             ##  [73] survival_3.8-3         ggstats_0.11.0         polyclip_1.10-7        ##  [76] fitdistrplus_1.2-4     pillar_1.11.1          KernSmooth_2.23-26     ##  [79] plotly_4.11.0          generics_0.1.4         RcppHNSW_0.6.0         ##  [82] scales_1.4.0           globals_0.18.0         xtable_1.8-4           ##  [85] glue_1.8.0             lazyeval_0.2.2         tools_4.5.1            ##  [88] data.table_1.17.8      RSpectra_0.16-2        RANN_2.6.2             ##  [91] fs_1.6.6               dotCall64_1.2          cowplot_1.2.0          ##  [94] grid_4.5.1             nlme_3.1-168           patchwork_1.3.2        ##  [97] cli_3.6.5              spatstat.sparse_3.1-0  textshaping_1.0.4      ## [100] fansi_1.0.6            spam_2.11-1            viridisLite_0.4.2      ## [103] uwot_0.2.3             gtable_0.3.6           sass_0.4.10            ## [106] digest_0.6.37          progressr_0.17.0       ggrepel_0.9.6          ## [109] htmlwidgets_1.6.4      farver_2.1.2           htmltools_0.5.8.1      ## [112] pkgdown_2.1.3          lifecycle_1.0.4        httr_1.4.7             ## [115] mime_0.13              MASS_7.3-65"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Stefano Mangiola. Author, maintainer. Maria Doyle. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mangiola S, Doyle MA, Anthony ATP (2021). “Interfacing Seurat R tidy universe.” Bioinformatics, btab404. https://doi.org/10.1093/bioinformatics/btab404.","code":"@Article{,   title = {Interfacing Seurat with the R tidy universe},   author = {Stefano Mangiola and Maria A Doyle and Anthony T Papenfuss Anthony},   journal = {Bioinformatics},   year = {2021},   volume = {btab404},   publisher = {Oxford Press},   url = {https://doi.org/10.1093/bioinformatics/btab404}, }"},{"path":"/index.html","id":"tidyseurat---part-of-tidytranscriptomics","dir":"","previous_headings":"","what":"Brings Seurat to the Tidyverse","title":"Brings Seurat to the Tidyverse","text":"Brings Seurat tidyverse! website: stemangiola.github.io/tidyseurat/ Please also look tidyseurat tidy single-cell RNA sequencing analysis tidySummarizedExperiment tidy bulk RNA sequencing analysis tidybulk tidy bulk RNA-seq analysis tidygate adding custom gate information tibble tidyHeatmap heatmaps produced tidy principles visual cue","code":""},{"path":"/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Brings Seurat to the Tidyverse","text":"tidyseurat provides bridge Seurat single-cell package [@butler2018integrating; @stuart2019comprehensive] tidyverse [@wickham2019welcome]. creates invisible layer enables viewing Seurat object tidyverse tibble, provides Seurat-compatible dplyr, tidyr, ggplot plotly functions.","code":""},{"path":[]},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Brings Seurat to the Tidyverse","text":"CRAN Github (development)","code":"install.packages(\"tidyseurat\") devtools::install_github(\"stemangiola/tidyseurat\") library(dplyr) library(tidyr) library(purrr) library(magrittr) library(ggplot2) library(Seurat) library(tidyseurat)"},{"path":"/index.html","id":"create-tidyseurat-the-best-of-both-worlds","dir":"","previous_headings":"","what":"Create tidyseurat, the best of both worlds!","title":"Brings Seurat to the Tidyverse","text":"seurat object evaluated tibble. fully compatible Seurat tidyverse APIs. looks like tibble Seurat object ","code":"pbmc_small = SeuratObject::pbmc_small pbmc_small ##  [90m# A Seurat-tibble abstraction: 80 × 15 [39m ##  [90m#  [90mFeatures=230 | Cells=80 | Active assay=RNA | Assays=RNA [0m [39m ##    .cell orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups ##     [3m [90m<chr> [39m [23m  [3m [90m<fct> [39m [23m            [3m [90m<dbl> [39m [23m         [3m [90m<int> [39m [23m  [3m [90m<fct> [39m [23m            [3m [90m<fct> [39m [23m          [3m [90m<chr> [39m [23m  ##  [90m 1 [39m ATGC… SeuratPro…         70           47 0               A             g2     ##  [90m 2 [39m CATG… SeuratPro…         85           52 0               A             g1     ##  [90m 3 [39m GAAC… SeuratPro…         87           50 1               B             g2     ##  [90m 4 [39m TGAC… SeuratPro…        127           56 0               A             g2     ##  [90m 5 [39m AGTC… SeuratPro…        173           53 0               A             g2     ##  [90m 6 [39m TCTG… SeuratPro…         70           48 0               A             g1     ##  [90m 7 [39m TGGT… SeuratPro…         64           36 0               A             g1     ##  [90m 8 [39m GCAG… SeuratPro…         72           45 0               A             g1     ##  [90m 9 [39m GATA… SeuratPro…         52           36 0               A             g1     ##  [90m10 [39m AATG… SeuratPro…        100           41 0               A             g1     ##  [90m# ℹ 70 more rows [39m ##  [90m# ℹ 8 more variables: RNA_snn_res.1 <fct>, PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, [39m ##  [90m#   PC_4 <dbl>, PC_5 <dbl>, tSNE_1 <dbl>, tSNE_2 <dbl> [39m pbmc_small@assays ## $RNA ## Assay data with 230 features for 80 cells ## Top 10 variable features: ##  PPBP, IGLL5, VDAC3, CD1C, AKR1C3, PF4, MYL9, GNLY, TREML1, CA2"},{"path":"/index.html","id":"preliminary-plots","dir":"","previous_headings":"","what":"Preliminary plots","title":"Brings Seurat to the Tidyverse","text":"Set colours theme plots. can treat pbmc_small effectively normal tibble plotting. plot number features per cell.  plot total features per cell.  plot abundance two features group.","code":"# Use colourblind-friendly colours friendly_cols <- c(\"#88CCEE\", \"#CC6677\", \"#DDCC77\", \"#117733\", \"#332288\", \"#AA4499\", \"#44AA99\", \"#999933\", \"#882255\", \"#661100\", \"#6699CC\")  # Set theme my_theme <-   list(     scale_fill_manual(values = friendly_cols),     scale_color_manual(values = friendly_cols),     theme_bw() +       theme(         panel.border = element_blank(),         axis.line = element_line(),         panel.grid.major = element_line(size = 0.2),         panel.grid.minor = element_line(size = 0.1),         text = element_text(size = 12),         legend.position = \"bottom\",         aspect.ratio = 1,         strip.background = element_blank(),         axis.title.x = element_text(margin = margin(t = 10, r = 10, b = 10, l = 10)),         axis.title.y = element_text(margin = margin(t = 10, r = 10, b = 10, l = 10))       )   ) pbmc_small %>%   ggplot(aes(nFeature_RNA, fill = groups)) +   geom_histogram() +   my_theme pbmc_small %>%   ggplot(aes(groups, nCount_RNA, fill = groups)) +   geom_boxplot(outlier.shape = NA) +   geom_jitter(width = 0.1) +   my_theme pbmc_small %>%   join_features(features = c(\"HLA-DRA\", \"LYZ\"), shape = \"long\") %>%   ggplot(aes(groups, .abundance_RNA + 1, fill = groups)) +   geom_boxplot(outlier.shape = NA) +   geom_jitter(aes(size = nCount_RNA), alpha = 0.5, width = 0.2) +   scale_y_log10() +   my_theme"},{"path":"/index.html","id":"preprocess-the-dataset","dir":"","previous_headings":"","what":"Preprocess the dataset","title":"Brings Seurat to the Tidyverse","text":"Also can treat object Seurat object proceed data processing. tool included tidyseurat collection, can use as_tibble permanently convert tidyseurat tibble.","code":"pbmc_small_pca <-   pbmc_small %>%   SCTransform(verbose = FALSE) %>%   FindVariableFeatures(verbose = FALSE) %>%   RunPCA(verbose = FALSE)  pbmc_small_pca ##  [90m# A Seurat-tibble abstraction: 80 × 17 [39m ##  [90m#  [90mFeatures=220 | Cells=80 | Active assay=SCT | Assays=RNA, SCT [0m [39m ##    .cell orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups ##     [3m [90m<chr> [39m [23m  [3m [90m<fct> [39m [23m            [3m [90m<dbl> [39m [23m         [3m [90m<int> [39m [23m  [3m [90m<fct> [39m [23m            [3m [90m<fct> [39m [23m          [3m [90m<chr> [39m [23m  ##  [90m 1 [39m ATGC… SeuratPro…         70           47 0               A             g2     ##  [90m 2 [39m CATG… SeuratPro…         85           52 0               A             g1     ##  [90m 3 [39m GAAC… SeuratPro…         87           50 1               B             g2     ##  [90m 4 [39m TGAC… SeuratPro…        127           56 0               A             g2     ##  [90m 5 [39m AGTC… SeuratPro…        173           53 0               A             g2     ##  [90m 6 [39m TCTG… SeuratPro…         70           48 0               A             g1     ##  [90m 7 [39m TGGT… SeuratPro…         64           36 0               A             g1     ##  [90m 8 [39m GCAG… SeuratPro…         72           45 0               A             g1     ##  [90m 9 [39m GATA… SeuratPro…         52           36 0               A             g1     ##  [90m10 [39m AATG… SeuratPro…        100           41 0               A             g1     ##  [90m# ℹ 70 more rows [39m ##  [90m# ℹ 10 more variables: RNA_snn_res.1 <fct>, nCount_SCT <dbl>, [39m ##  [90m#   nFeature_SCT <int>, PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, PC_4 <dbl>, [39m ##  [90m#   PC_5 <dbl>, tSNE_1 <dbl>, tSNE_2 <dbl> [39m pbmc_small_pca %>%   as_tibble() %>%   select(contains(\"PC\"), everything()) %>%   GGally::ggpairs(columns = 1:5, ggplot2::aes(colour = groups)) +   my_theme"},{"path":"/index.html","id":"identify-clusters","dir":"","previous_headings":"","what":"Identify clusters","title":"Brings Seurat to the Tidyverse","text":"proceed cluster identification Seurat. Now can interrogate object regular tibble data frame. can identify cluster markers using Seurat.","code":"pbmc_small_cluster <-   pbmc_small_pca %>%   FindNeighbors(verbose = FALSE) %>%   FindClusters(method = \"igraph\", verbose = FALSE)  pbmc_small_cluster ##  [90m# A Seurat-tibble abstraction: 80 × 19 [39m ##  [90m#  [90mFeatures=220 | Cells=80 | Active assay=SCT | Assays=RNA, SCT [0m [39m ##    .cell orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups ##     [3m [90m<chr> [39m [23m  [3m [90m<fct> [39m [23m            [3m [90m<dbl> [39m [23m         [3m [90m<int> [39m [23m  [3m [90m<fct> [39m [23m            [3m [90m<fct> [39m [23m          [3m [90m<chr> [39m [23m  ##  [90m 1 [39m ATGC… SeuratPro…         70           47 0               A             g2     ##  [90m 2 [39m CATG… SeuratPro…         85           52 0               A             g1     ##  [90m 3 [39m GAAC… SeuratPro…         87           50 1               B             g2     ##  [90m 4 [39m TGAC… SeuratPro…        127           56 0               A             g2     ##  [90m 5 [39m AGTC… SeuratPro…        173           53 0               A             g2     ##  [90m 6 [39m TCTG… SeuratPro…         70           48 0               A             g1     ##  [90m 7 [39m TGGT… SeuratPro…         64           36 0               A             g1     ##  [90m 8 [39m GCAG… SeuratPro…         72           45 0               A             g1     ##  [90m 9 [39m GATA… SeuratPro…         52           36 0               A             g1     ##  [90m10 [39m AATG… SeuratPro…        100           41 0               A             g1     ##  [90m# ℹ 70 more rows [39m ##  [90m# ℹ 12 more variables: RNA_snn_res.1 <fct>, nCount_SCT <dbl>, [39m ##  [90m#   nFeature_SCT <int>, SCT_snn_res.0.8 <fct>, seurat_clusters <fct>, [39m ##  [90m#   PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, PC_4 <dbl>, PC_5 <dbl>, tSNE_1 <dbl>, [39m ##  [90m#   tSNE_2 <dbl> [39m pbmc_small_cluster %>%   count(groups, seurat_clusters) ##  [90m# A tibble: 6 × 3 [39m ##   groups seurat_clusters     n ##    [3m [90m<chr> [39m [23m   [3m [90m<fct> [39m [23m            [3m [90m<int> [39m [23m ##  [90m1 [39m g1     0                  23 ##  [90m2 [39m g1     1                  17 ##  [90m3 [39m g1     2                   4 ##  [90m4 [39m g2     0                  17 ##  [90m5 [39m g2     1                  13 ##  [90m6 [39m g2     2                   6 # Identify top 10 markers per cluster markers <-   pbmc_small_cluster %>%   FindAllMarkers(only.pos = TRUE, min.pct = 0.25, thresh.use = 0.25) %>%   group_by(cluster) %>%   top_n(10, avg_log2FC)  # Plot heatmap pbmc_small_cluster %>%   DoHeatmap(     features = markers$gene,     group.colors = friendly_cols   )"},{"path":"/index.html","id":"reduce-dimensions","dir":"","previous_headings":"","what":"Reduce dimensions","title":"Brings Seurat to the Tidyverse","text":"can calculate first 3 UMAP dimensions using Seurat framework. can plot using 3D plot using plotly. screenshot plotly","code":"pbmc_small_UMAP <-   pbmc_small_cluster %>%   RunUMAP(reduction = \"pca\", dims = 1:15, n.components = 3L) pbmc_small_UMAP %>%   plot_ly(     x = ~`UMAP_1`,     y = ~`UMAP_2`,     z = ~`UMAP_3`,     color = ~seurat_clusters,     colors = friendly_cols[1:4]   )"},{"path":"/index.html","id":"cell-type-prediction","dir":"","previous_headings":"","what":"Cell type prediction","title":"Brings Seurat to the Tidyverse","text":"can infer cell type identities using SingleR [@aran2019reference] manipulate output using tidyverse. can easily summarise results. example, can see cell type classification overlaps cluster classification. can easily reshape data building information-rich faceted plots. can easily plot gene correlation per cell category, adding multi-layer annotations.","code":"# Get cell type reference data blueprint <- celldex::BlueprintEncodeData()  # Infer cell identities cell_type_df <-   GetAssayData(pbmc_small_UMAP, slot = 'counts', assay = \"SCT\") %>%   log1p() %>%   Matrix::Matrix(sparse = TRUE) %>%   SingleR::SingleR(     ref = blueprint,     labels = blueprint$label.main,     method = \"single\"   ) %>%   as.data.frame() %>%   as_tibble(rownames = \"cell\") %>%   select(cell, first.labels) # Join UMAP and cell type info pbmc_small_cell_type <-   pbmc_small_UMAP %>%   left_join(cell_type_df, by = \"cell\")  # Reorder columns pbmc_small_cell_type %>%   select(cell, first.labels, everything()) pbmc_small_cell_type %>%   count(seurat_clusters, first.labels) pbmc_small_cell_type %>%    # Reshape and add classifier column   pivot_longer(     cols = c(seurat_clusters, first.labels),     names_to = \"classifier\", values_to = \"label\"   ) %>%    # UMAP plots for cell type and cluster   ggplot(aes(UMAP_1, UMAP_2, color = label)) +   geom_point() +   facet_wrap(~classifier) +   my_theme pbmc_small_cell_type %>%    # Add some mitochondrial abundance values   mutate(mitochondrial = rnorm(n())) %>%    # Plot correlation   join_features(features = c(\"CST3\", \"LYZ\"), shape = \"wide\") %>%   ggplot(aes(CST3 + 1, LYZ + 1, color = groups, size = mitochondrial)) +   geom_point() +   facet_wrap(~first.labels, scales = \"free\") +   scale_x_log10() +   scale_y_log10() +   my_theme"},{"path":"/index.html","id":"nested-analyses","dir":"","previous_headings":"","what":"Nested analyses","title":"Brings Seurat to the Tidyverse","text":"powerful tool can use tidyseurat nest. can easily perform independent analyses subsets dataset. First classify cell types lymphoid myeloid; , nest based new classification Now can independently lymphoid myeloid subsets () find variable features, (ii) reduce dimensions, (iii) cluster using tidyverse Seurat seamlessly. Now can unnest plot new classification.","code":"pbmc_small_nested <-   pbmc_small_cell_type %>%   filter(first.labels != \"Erythrocytes\") %>%   mutate(cell_class = if_else(`first.labels` %in% c(\"Macrophages\", \"Monocytes\"), \"myeloid\", \"lymphoid\")) %>%   nest(data = -cell_class)  pbmc_small_nested pbmc_small_nested_reanalysed <-   pbmc_small_nested %>%   mutate(data = map(     data, ~ .x %>%       FindVariableFeatures(verbose = FALSE) %>%       RunPCA(npcs = 10, verbose = FALSE) %>%       FindNeighbors(verbose = FALSE) %>%       FindClusters(method = \"igraph\", verbose = FALSE) %>%       RunUMAP(reduction = \"pca\", dims = 1:10, n.components = 3L, verbose = FALSE)   ))  pbmc_small_nested_reanalysed pbmc_small_nested_reanalysed %>%    # Convert to tibble otherwise Seurat drops reduced dimensions when unifying data sets.   mutate(data = map(data, ~ .x %>% as_tibble())) %>%   unnest(data) %>%    # Define unique clusters   unite(\"cluster\", c(cell_class, seurat_clusters), remove = FALSE) %>%    # Plotting   ggplot(aes(UMAP_1, UMAP_2, color = cluster)) +   geom_point() +   facet_wrap(~cell_class) +   my_theme"},{"path":"/index.html","id":"aggregating-cells","dir":"","previous_headings":"","what":"Aggregating cells","title":"Brings Seurat to the Tidyverse","text":"Sometimes, necessary aggregate gene-transcript abundance group cells single value. example, comparing groups cells across different samples fixed-effect models. tidyseurat, cell aggregation can achieved using aggregate_cells function.","code":"pbmc_small %>%   aggregate_cells(groups, assays = \"RNA\")"},{"path":"/reference/add_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Add class to abject — add_class","title":"Add class to abject — add_class","text":"Add class abject","code":""},{"path":"/reference/add_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add class to abject — add_class","text":"","code":"add_class(var, name)"},{"path":"/reference/add_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add class to abject — add_class","text":"var tibble name character name attribute","code":""},{"path":"/reference/add_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add class to abject — add_class","text":"tibble additional attribute","code":""},{"path":"/reference/aggregate_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate cells — aggregate_cells","title":"Aggregate cells — aggregate_cells","text":"Combine cells groups based shared variables aggregate feature counts.","code":""},{"path":"/reference/aggregate_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate cells — aggregate_cells","text":"","code":"# S4 method for class 'Seurat' aggregate_cells(   .data,   .sample = NULL,   slot = \"data\",   assays = NULL,   aggregation_function = Matrix::rowSums,   ... )"},{"path":"/reference/aggregate_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate cells — aggregate_cells","text":".data tidyseurat object .sample vector variables cells aggregated slot slot function applied assays assay function applied aggregation_function method cell-feature value aggregation ... Used future extendibility","code":""},{"path":"/reference/aggregate_cells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate cells — aggregate_cells","text":"tibble object","code":""},{"path":"/reference/aggregate_cells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate cells — aggregate_cells","text":"","code":"data(pbmc_small) pbmc_small_pseudo_bulk <- pbmc_small |>   aggregate_cells(c(groups, letter.idents), assays=\"RNA\") #> Joining with `by = join_by(letter.idents, groups)`"},{"path":"/reference/arrange.html","id":null,"dir":"Reference","previous_headings":"","what":"Order rows using column values — arrange","title":"Order rows using column values — arrange","text":"arrange() orders rows data frame values selected columns. Unlike dplyr verbs, arrange() largely ignores grouping; need explicitly mention grouping variables (use  .by_group = TRUE) order group , functions variables evaluated per data frame, per group.","code":""},{"path":"/reference/arrange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Order rows using column values — arrange","text":"","code":"# S3 method for class 'Seurat' arrange(.data, ..., .by_group = FALSE)"},{"path":"/reference/arrange.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Order rows using column values — arrange","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... <data-masking> Variables, functions variables. Use desc() sort variable descending order. .by_group TRUE, sort first grouping variable. Applies grouped data frames .","code":""},{"path":"/reference/arrange.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Order rows using column values — arrange","text":"object type .data. output following properties: rows appear output, (usually) different place. Columns modified. Groups modified. Data frame attributes preserved.","code":""},{"path":[]},{"path":"/reference/arrange.html","id":"missing-values","dir":"Reference","previous_headings":"","what":"Missing values","title":"Order rows using column values — arrange","text":"Unlike base sorting sort(), NA : always sorted end local data, even wrapped desc(). treated differently remote data, depending backend.","code":""},{"path":"/reference/arrange.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Order rows using column values — arrange","text":"function generic, means packages can provide implementations (methods) classes. See documentation individual methods extra arguments differences behaviour. following methods currently available loaded packages: dplyr (data.frame), plotly (plotly), tidyseurat (Seurat) .","code":""},{"path":[]},{"path":"/reference/arrange.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Order rows using column values — arrange","text":"","code":"data(pbmc_small) pbmc_small |>     arrange(nFeature_RNA) #> Warning: `arrange()` was deprecated in tidyseurat 0.7.5. #> ℹ tidyseurat says: arrange() is temporarly deprected as it is not clear that #>   Seurat allows reordering of cells. #> # A Seurat-tibble abstraction: 80 × 15 #> # Features=230 | Cells=80 | Active assay=RNA | Assays=RNA #>    .cell orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups #>    <chr> <fct>           <dbl>        <int> <fct>           <fct>         <chr>  #>  1 ATGC… SeuratPro…         70           47 0               A             g2     #>  2 CATG… SeuratPro…         85           52 0               A             g1     #>  3 GAAC… SeuratPro…         87           50 1               B             g2     #>  4 TGAC… SeuratPro…        127           56 0               A             g2     #>  5 AGTC… SeuratPro…        173           53 0               A             g2     #>  6 TCTG… SeuratPro…         70           48 0               A             g1     #>  7 TGGT… SeuratPro…         64           36 0               A             g1     #>  8 GCAG… SeuratPro…         72           45 0               A             g1     #>  9 GATA… SeuratPro…         52           36 0               A             g1     #> 10 AATG… SeuratPro…        100           41 0               A             g1     #> # ℹ 70 more rows #> # ℹ 8 more variables: RNA_snn_res.1 <fct>, PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, #> #   PC_4 <dbl>, PC_5 <dbl>, tSNE_1 <dbl>, tSNE_2 <dbl>"},{"path":"/reference/as_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce lists, matrices, and more to data frames — as_tibble","title":"Coerce lists, matrices, and more to data frames — as_tibble","text":"as_tibble() turns existing object, data frame matrix, -called tibble, data frame class tbl_df. contrast tibble(), builds tibble individual columns. as_tibble() tibble() base::.data.frame() base::data.frame(). as_tibble() S3 generic, methods : data.frame: Thin wrapper around list method implements tibble's treatment rownames. matrix, poly, ts, table Default: inputs first coerced base::.data.frame(). as_tibble_row() converts vector tibble one row. input list, elements must size one. as_tibble_col() converts vector tibble one column.","code":""},{"path":"/reference/as_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce lists, matrices, and more to data frames — as_tibble","text":"","code":"# S3 method for class 'Seurat' as_tibble(   x,   ...,   .name_repair = c(\"check_unique\", \"unique\", \"universal\", \"minimal\"),   rownames = NULL )"},{"path":"/reference/as_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce lists, matrices, and more to data frames — as_tibble","text":"x data frame, list, matrix, object reasonably coerced tibble. ... Unused, extensibility. .name_repair Treatment problematic column names: \"minimal\": name repair checks, beyond basic existence, \"unique\": Make sure names unique empty, \"check_unique\": (default value), name repair, check unique, \"universal\": Make names unique syntactic \"unique_quiet\": \"unique\", \"quiet\" \"universal_quiet\": \"universal\", \"quiet\" function: apply custom name repair (e.g., .name_repair = make.names names style base R). purrr-style anonymous function, see rlang::as_function() argument passed repair vctrs::vec_as_names(). See details terms strategies used enforce . rownames treat existing row names data frame matrix: NULL: remove row names. default. NA: keep row names. string: name new column. Existing rownames transferred column row.names attribute deleted. name repair applied new column name, even x already contains column name. Use as_tibble(rownames_to_column(...)) safeguard case. Read rownames.","code":""},{"path":"/reference/as_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce lists, matrices, and more to data frames — as_tibble","text":"`tibble`","code":""},{"path":"/reference/as_tibble.html","id":"row-names","dir":"Reference","previous_headings":"","what":"Row names","title":"Coerce lists, matrices, and more to data frames — as_tibble","text":"default behavior silently remove row names. New code explicitly convert row names new column using rownames argument. existing code relies retention row names, call pkgconfig::set_config(\"tibble::rownames\" = NA) script package's .onLoad()  function.","code":""},{"path":"/reference/as_tibble.html","id":"life-cycle","dir":"Reference","previous_headings":"","what":"Life cycle","title":"Coerce lists, matrices, and more to data frames — as_tibble","text":"Using as_tibble() vectors superseded version 3.0.0, prefer expressive as_tibble_row() as_tibble_col() variants new code.","code":""},{"path":[]},{"path":"/reference/as_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce lists, matrices, and more to data frames — as_tibble","text":"","code":"data(pbmc_small) pbmc_small |> as_tibble() #> # A tibble: 80 × 29 #>    .cell orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups #>    <chr> <fct>           <dbl>        <int> <fct>           <fct>         <chr>  #>  1 ATGC… SeuratPro…         70           47 0               A             g2     #>  2 CATG… SeuratPro…         85           52 0               A             g1     #>  3 GAAC… SeuratPro…         87           50 1               B             g2     #>  4 TGAC… SeuratPro…        127           56 0               A             g2     #>  5 AGTC… SeuratPro…        173           53 0               A             g2     #>  6 TCTG… SeuratPro…         70           48 0               A             g1     #>  7 TGGT… SeuratPro…         64           36 0               A             g1     #>  8 GCAG… SeuratPro…         72           45 0               A             g1     #>  9 GATA… SeuratPro…         52           36 0               A             g1     #> 10 AATG… SeuratPro…        100           41 0               A             g1     #> # ℹ 70 more rows #> # ℹ 22 more variables: RNA_snn_res.1 <fct>, PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, #> #   PC_4 <dbl>, PC_5 <dbl>, PC_6 <dbl>, PC_7 <dbl>, PC_8 <dbl>, PC_9 <dbl>, #> #   PC_10 <dbl>, PC_11 <dbl>, PC_12 <dbl>, PC_13 <dbl>, PC_14 <dbl>, #> #   PC_15 <dbl>, PC_16 <dbl>, PC_17 <dbl>, PC_18 <dbl>, PC_19 <dbl>, #> #   tSNE_1 <dbl>, tSNE_2 <dbl>"},{"path":"/reference/bind_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Efficiently bind multiple data frames by row and column — bind_rows","title":"Efficiently bind multiple data frames by row and column — bind_rows","text":"efficient implementation common pattern `.call(rbind, dfs)` `.call(cbind, dfs)` binding many data frames one. efficient implementation common pattern `.call(rbind, dfs)` `.call(cbind, dfs)` binding many data frames one.","code":""},{"path":"/reference/bind_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Efficiently bind multiple data frames by row and column — bind_rows","text":"","code":"# S3 method for class 'Seurat' bind_rows(..., .id = NULL, add.cell.ids = NULL)  # S3 method for class 'Seurat' bind_cols(..., .id = NULL)"},{"path":"/reference/bind_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Efficiently bind multiple data frames by row and column — bind_rows","text":"... Data frames combine. argument can either data frame, list data   frame, list data frames. row-binding, columns matched name, missing   columns filled NA. column-binding, rows matched position, data   frames must number rows. match value,   position, see mutate-joins. .id Data frame identifier. `.id` supplied, new column identifiers   created link row original data frame. labels   taken named arguments `bind_rows()`.   list data frames supplied, labels taken   names list. names found numeric sequence   used instead. add.cell.ids Seurat 3.0 character vector length(x = c(x, y)). Appends corresponding values start objects' cell names.","code":""},{"path":"/reference/bind_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Efficiently bind multiple data frames by row and column — bind_rows","text":"`bind_rows()` `bind_cols()` return type   first input, either data frame, `tbl_df`, `grouped_df`. `bind_rows()` `bind_cols()` return type   first input, either data frame, `tbl_df`, `grouped_df`.","code":""},{"path":"/reference/bind_rows.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Efficiently bind multiple data frames by row and column — bind_rows","text":"output `bind_rows()` contain column column appears inputs. output `bind_rows()` contain column column appears inputs.","code":""},{"path":"/reference/bind_rows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Efficiently bind multiple data frames by row and column — bind_rows","text":"","code":"data(pbmc_small) tt <- pbmc_small ttservice::bind_rows(tt, tt) #> Warning: Some cell names are duplicated across objects provided. Renaming to enforce unique cell names. #> # A Seurat-tibble abstraction: 160 × 8 #> # Features=230 | Cells=160 | Active assay=RNA | Assays=RNA #>    .cell orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups #>    <chr> <chr>           <dbl>        <int> <chr>           <chr>         <chr>  #>  1 ATGC… SeuratPro…         70           47 0               A             g2     #>  2 CATG… SeuratPro…         85           52 0               A             g1     #>  3 GAAC… SeuratPro…         87           50 1               B             g2     #>  4 TGAC… SeuratPro…        127           56 0               A             g2     #>  5 AGTC… SeuratPro…        173           53 0               A             g2     #>  6 TCTG… SeuratPro…         70           48 0               A             g1     #>  7 TGGT… SeuratPro…         64           36 0               A             g1     #>  8 GCAG… SeuratPro…         72           45 0               A             g1     #>  9 GATA… SeuratPro…         52           36 0               A             g1     #> 10 AATG… SeuratPro…        100           41 0               A             g1     #> # ℹ 150 more rows #> # ℹ 1 more variable: RNA_snn_res.1 <chr>  tt_bind <- tt |> select(nCount_RNA ,nFeature_RNA) #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis. tt |> ttservice::bind_cols(tt_bind) #> New names: #> • `nCount_RNA` -> `nCount_RNA...2` #> • `nFeature_RNA` -> `nFeature_RNA...3` #> • `nCount_RNA` -> `nCount_RNA...8` #> • `nFeature_RNA` -> `nFeature_RNA...9` #> # A Seurat-tibble abstraction: 80 × 17 #> # Features=230 | Cells=80 | Active assay=RNA | Assays=RNA #>    .cell          orig.ident    nCount_RNA...2 nFeature_RNA...3 RNA_snn_res.0.8 #>    <chr>          <fct>                  <dbl>            <int> <fct>           #>  1 ATGCCAGAACGACT SeuratProject             70               47 0               #>  2 CATGGCCTGTGCAT SeuratProject             85               52 0               #>  3 GAACCTGATGAACC SeuratProject             87               50 1               #>  4 TGACTGGATTCTCA SeuratProject            127               56 0               #>  5 AGTCAGACTGCACA SeuratProject            173               53 0               #>  6 TCTGATACACGTGT SeuratProject             70               48 0               #>  7 TGGTATCTAAACAG SeuratProject             64               36 0               #>  8 GCAGCTCTGTTTCT SeuratProject             72               45 0               #>  9 GATATAACACGCAT SeuratProject             52               36 0               #> 10 AATGTTGACAGTCA SeuratProject            100               41 0               #> # ℹ 70 more rows #> # ℹ 12 more variables: letter.idents <fct>, groups <chr>, RNA_snn_res.1 <fct>, #> #   nCount_RNA...8 <dbl>, nFeature_RNA...9 <int>, PC_1 <dbl>, PC_2 <dbl>, #> #   PC_3 <dbl>, PC_4 <dbl>, PC_5 <dbl>, tSNE_1 <dbl>, tSNE_2 <dbl>"},{"path":"/reference/cell_type_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Cell types of 80 PBMC single cells — cell_type_df","title":"Cell types of 80 PBMC single cells — cell_type_df","text":"dataset containing barcodes cell types 80 PBMC single cells.","code":""},{"path":"/reference/cell_type_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cell types of 80 PBMC single cells — cell_type_df","text":"","code":"data(cell_type_df)"},{"path":"/reference/cell_type_df.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Cell types of 80 PBMC single cells — cell_type_df","text":"tibble containing 80 rows 2 columns.   Cells subsample Peripheral Blood Mononuclear Cells (PBMC)   dataset 2,700 single cell. Cell types identified SingleR. cell cell identifier, barcode first.labels cell type","code":""},{"path":"/reference/cell_type_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Cell types of 80 PBMC single cells — cell_type_df","text":"https://satijalab.org/seurat/v3.1/pbmc3k_tutorial.html","code":""},{"path":"/reference/cell_type_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cell types of 80 PBMC single cells — cell_type_df","text":"`tibble`","code":""},{"path":"/reference/count.html","id":null,"dir":"Reference","previous_headings":"","what":"Count the observations in each group — count","title":"Count the observations in each group — count","text":"count() lets quickly count unique values one variables: df %>% count(, b) roughly equivalent df %>% group_by(, b) %>% summarise(n = n()). count() paired tally(), lower-level helper equivalent df %>% summarise(n = n()). Supply wt perform weighted counts, switching summary n = n() n = sum(wt). add_count() add_tally() equivalents count() tally() use mutate() instead summarise() add new column group-wise counts.","code":""},{"path":"/reference/count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count the observations in each group — count","text":"","code":"# S3 method for class 'Seurat' count(   x,   ...,   wt = NULL,   sort = FALSE,   name = NULL,   .drop = group_by_drop_default(x) )  # S3 method for class 'Seurat' add_count(   x,   ...,   wt = NULL,   sort = FALSE,   name = NULL,   .drop = group_by_drop_default(x) )"},{"path":"/reference/count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count the observations in each group — count","text":"x data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). ... <data-masking> Variables group . wt <data-masking> Frequency weights. Can NULL variable: NULL (default), counts number rows group. variable, computes sum(wt) group. sort TRUE, show largest groups top. name name new column output. omitted, default n. already column called n, use nn. column called n nn, 'll use nnn, , adding ns gets new name. .drop Handling factor levels appear data, passed group_by(). count(): FALSE include counts empty groups (.e. levels factors exist data). add_count(): deprecated since actually affect output.","code":""},{"path":"/reference/count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count the observations in each group — count","text":"object type .data. count() add_count() group transiently, output groups input.","code":""},{"path":"/reference/count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count the observations in each group — count","text":"","code":"data(pbmc_small) pbmc_small |> count(groups) #> tidyseurat says: A data frame is returned for independent data analysis. #> # A tibble: 2 × 2 #>   groups     n #>   <chr>  <int> #> 1 g1        44 #> 2 g2        36"},{"path":"/reference/distinct.html","id":null,"dir":"Reference","previous_headings":"","what":"Keep distinct/unique rows — distinct","title":"Keep distinct/unique rows — distinct","text":"Keep unique/distinct rows data frame. similar unique.data.frame() considerably faster.","code":""},{"path":"/reference/distinct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep distinct/unique rows — distinct","text":"","code":"# S3 method for class 'Seurat' distinct(.data, ..., .keep_all = FALSE)"},{"path":"/reference/distinct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep distinct/unique rows — distinct","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... <data-masking> Optional variables use determining uniqueness. multiple rows given combination inputs, first row preserved. omitted, use variables data frame. .keep_all TRUE, keep variables .data. combination ... distinct, keeps first row values.","code":""},{"path":"/reference/distinct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Keep distinct/unique rows — distinct","text":"object type .data. output following properties: Rows subset input appear order. Columns modified ... empty .keep_all TRUE. Otherwise, distinct() first calls mutate() create new columns. Groups modified. Data frame attributes preserved.","code":""},{"path":"/reference/distinct.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Keep distinct/unique rows — distinct","text":"function generic, means packages can provide implementations (methods) classes. See documentation individual methods extra arguments differences behaviour. following methods currently available loaded packages: dplyr (data.frame), plotly (plotly), tidyseurat (Seurat) .","code":""},{"path":"/reference/distinct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Keep distinct/unique rows — distinct","text":"","code":"data(\"pbmc_small\") pbmc_small |> distinct(groups) #> tidyseurat says: A data frame is returned for independent data analysis. #> # A tibble: 2 × 1 #>   groups #>   <chr>  #> 1 g2     #> 2 g1"},{"path":"/reference/drop_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove class to abject — drop_class","title":"Remove class to abject — drop_class","text":"Remove class abject","code":""},{"path":"/reference/drop_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove class to abject — drop_class","text":"","code":"drop_class(var, name)"},{"path":"/reference/drop_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove class to abject — drop_class","text":"var tibble name character name class","code":""},{"path":"/reference/drop_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove class to abject — drop_class","text":"tibble additional attribute","code":""},{"path":"/reference/extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a character column into multiple columns using regular expression groups — extract","title":"Extract a character column into multiple columns using regular expression groups — extract","text":"extract() superseded favour separate_wider_regex() polished API better handling problems. Superseded functions go away, receive critical bug fixes. Given regular expression capturing groups, extract() turns group new column. groups match, input NA, output NA.","code":""},{"path":"/reference/extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a character column into multiple columns using regular expression groups — extract","text":"","code":"# S3 method for class 'Seurat' extract(   data,   col,   into,   regex = \"([[:alnum:]]+)\",   remove = TRUE,   convert = FALSE,   ... )"},{"path":"/reference/extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a character column into multiple columns using regular expression groups — extract","text":"data data frame. col <tidy-select> Column expand. Names new variables create character vector. Use NA omit variable output. regex string representing regular expression used extract desired values. one group (defined ()) element . remove TRUE, remove input column output data frame. convert TRUE, run type.convert() .= TRUE new columns. useful component columns integer, numeric logical. NB: cause string \"NA\"s converted NAs. ... Additional arguments passed methods.","code":""},{"path":"/reference/extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a character column into multiple columns using regular expression groups — extract","text":"`tidyseurat`","code":""},{"path":[]},{"path":"/reference/extract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a character column into multiple columns using regular expression groups — extract","text":"","code":"data(pbmc_small) pbmc_small |>   extract(groups,      into=\"g\",      regex=\"g([0-9])\",      convert=TRUE) #> # A Seurat-tibble abstraction: 80 × 15 #> # Features=230 | Cells=80 | Active assay=RNA | Assays=RNA #>    .cell  orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents     g #>    <chr>  <fct>           <dbl>        <int> <fct>           <fct>         <int> #>  1 ATGCC… SeuratPro…         70           47 0               A                 2 #>  2 CATGG… SeuratPro…         85           52 0               A                 1 #>  3 GAACC… SeuratPro…         87           50 1               B                 2 #>  4 TGACT… SeuratPro…        127           56 0               A                 2 #>  5 AGTCA… SeuratPro…        173           53 0               A                 2 #>  6 TCTGA… SeuratPro…         70           48 0               A                 1 #>  7 TGGTA… SeuratPro…         64           36 0               A                 1 #>  8 GCAGC… SeuratPro…         72           45 0               A                 1 #>  9 GATAT… SeuratPro…         52           36 0               A                 1 #> 10 AATGT… SeuratPro…        100           41 0               A                 1 #> # ℹ 70 more rows #> # ℹ 8 more variables: RNA_snn_res.1 <fct>, PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, #> #   PC_4 <dbl>, PC_5 <dbl>, tSNE_1 <dbl>, tSNE_2 <dbl>"},{"path":"/reference/filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Keep rows that match a condition — filter","title":"Keep rows that match a condition — filter","text":"filter() function used subset data frame, retaining rows satisfy conditions. retained, row must produce value TRUE conditions. Note condition evaluates NA row dropped, unlike base subsetting [.","code":""},{"path":"/reference/filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep rows that match a condition — filter","text":"","code":"# S3 method for class 'Seurat' filter(.data, ..., .preserve = FALSE)"},{"path":"/reference/filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep rows that match a condition — filter","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... <data-masking> Expressions return logical value, defined terms variables .data. multiple expressions included, combined & operator. rows conditions evaluate TRUE kept. .preserve Relevant .data input grouped. .preserve = FALSE (default), grouping structure recalculated based resulting data, otherwise grouping kept .","code":""},{"path":"/reference/filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Keep rows that match a condition — filter","text":"object type .data. output following properties: Rows subset input, appear order. Columns modified. number groups may reduced (.preserve TRUE). Data frame attributes preserved.","code":""},{"path":"/reference/filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Keep rows that match a condition — filter","text":"filter() function used subset rows .data, applying expressions ... column values determine rows retained. can applied grouped ungrouped data (see group_by() ungroup()). However, dplyr yet smart enough optimise filtering operation grouped datasets need grouped calculations. reason, filtering often considerably faster ungrouped data.","code":""},{"path":"/reference/filter.html","id":"useful-filter-functions","dir":"Reference","previous_headings":"","what":"Useful filter functions","title":"Keep rows that match a condition — filter","text":"many functions operators useful constructing expressions used filter data: ==, >, >= etc &, |, !, xor() .na() (), near()","code":""},{"path":"/reference/filter.html","id":"grouped-tibbles","dir":"Reference","previous_headings":"","what":"Grouped tibbles","title":"Keep rows that match a condition — filter","text":"filtering expressions computed within groups, may yield different results grouped tibbles. case soon aggregating, lagging, ranking function involved. Compare ungrouped filtering:   grouped equivalent:   ungrouped version, filter() compares value mass row global average (taken whole data set), keeping rows mass greater global average. contrast, grouped version calculates average mass separately gender group, keeps rows mass greater relevant within-gender average.","code":"starwars %>% filter(mass > mean(mass, na.rm = TRUE)) starwars %>% group_by(gender) %>% filter(mass > mean(mass, na.rm = TRUE))"},{"path":"/reference/filter.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Keep rows that match a condition — filter","text":"function generic, means packages can provide implementations (methods) classes. See documentation individual methods extra arguments differences behaviour. following methods currently available loaded packages: dplyr (data.frame, ts), plotly (plotly), tidyseurat (Seurat) .","code":""},{"path":[]},{"path":"/reference/filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Keep rows that match a condition — filter","text":"","code":"data(\"pbmc_small\") pbmc_small |>  filter(groups == \"g1\") #> # A Seurat-tibble abstraction: 44 × 15 #> # Features=230 | Cells=44 | Active assay=RNA | Assays=RNA #>    .cell orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups #>    <chr> <fct>           <dbl>        <int> <fct>           <fct>         <chr>  #>  1 CATG… SeuratPro…         85           52 0               A             g1     #>  2 TCTG… SeuratPro…         70           48 0               A             g1     #>  3 TGGT… SeuratPro…         64           36 0               A             g1     #>  4 GCAG… SeuratPro…         72           45 0               A             g1     #>  5 GATA… SeuratPro…         52           36 0               A             g1     #>  6 AATG… SeuratPro…        100           41 0               A             g1     #>  7 AGAG… SeuratPro…        191           61 0               A             g1     #>  8 CTAA… SeuratPro…        168           44 0               A             g1     #>  9 TTGG… SeuratPro…        135           45 0               A             g1     #> 10 CATC… SeuratPro…         79           43 0               A             g1     #> # ℹ 34 more rows #> # ℹ 8 more variables: RNA_snn_res.1 <fct>, PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, #> #   PC_4 <dbl>, PC_5 <dbl>, tSNE_1 <dbl>, tSNE_2 <dbl>  # Learn more in ?dplyr_eval"},{"path":"/reference/formatting.html","id":null,"dir":"Reference","previous_headings":"","what":"Printing tibbles — formatting","title":"Printing tibbles — formatting","text":"One main features tbl_df class printing: Tibbles print many rows columns fit one screen, supplemented summary remaining rows columns. Tibble reveals type column, keeps user informed whether variable , e.g., <chr> <fct> (character versus factor). See vignette(\"types\") overview common type abbreviations. Printing can tweaked one-call calling print() explicitly setting arguments like n width. persistent control available setting options described pillar::pillar_options. See also vignette(\"digits\") comparison base options, vignette(\"numbers\") showcases num() char() creating columns custom formatting options. tibble 3.1.0, printing handled entirely pillar package. implement package extends tibble, printed output can customized various ways. See vignette(\"extending\", package = \"pillar\") details, pillar::pillar_options options control display console.","code":""},{"path":"/reference/formatting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Printing tibbles — formatting","text":"","code":"# S3 method for class 'Seurat' print(x, ..., n = NULL, width = NULL, n_extra = NULL)"},{"path":"/reference/formatting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Printing tibbles — formatting","text":"x Object format print. ... Passed tbl_format_setup(). n Number rows show. NULL, default, print rows less print_max option. Otherwise, print many rows specified print_min option. width Width text output generate. defaults NULL, means use width option. n_extra Number extra columns print abbreviated information , width small entire tibble. `NULL`, default, print information `tibble.max_extra_cols` extra columns.","code":""},{"path":"/reference/formatting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Printing tibbles — formatting","text":"Prints message console describing   contents `tidyseurat`.","code":""},{"path":"/reference/formatting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Printing tibbles — formatting","text":"","code":"data(pbmc_small) print(pbmc_small) #> # A Seurat-tibble abstraction: 80 × 15 #> # Features=230 | Cells=80 | Active assay=RNA | Assays=RNA #>    .cell orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups #>    <chr> <fct>           <dbl>        <int> <fct>           <fct>         <chr>  #>  1 ATGC… SeuratPro…         70           47 0               A             g2     #>  2 CATG… SeuratPro…         85           52 0               A             g1     #>  3 GAAC… SeuratPro…         87           50 1               B             g2     #>  4 TGAC… SeuratPro…        127           56 0               A             g2     #>  5 AGTC… SeuratPro…        173           53 0               A             g2     #>  6 TCTG… SeuratPro…         70           48 0               A             g1     #>  7 TGGT… SeuratPro…         64           36 0               A             g1     #>  8 GCAG… SeuratPro…         72           45 0               A             g1     #>  9 GATA… SeuratPro…         52           36 0               A             g1     #> 10 AATG… SeuratPro…        100           41 0               A             g1     #> # ℹ 70 more rows #> # ℹ 8 more variables: RNA_snn_res.1 <fct>, PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, #> #   PC_4 <dbl>, PC_5 <dbl>, tSNE_1 <dbl>, tSNE_2 <dbl>"},{"path":"/reference/full_join.html","id":null,"dir":"Reference","previous_headings":"","what":"Mutating joins — full_join","title":"Mutating joins — full_join","text":"Mutating joins add columns y x, matching observations based keys. four mutating joins: inner join, three outer joins.","code":""},{"path":"/reference/full_join.html","id":"inner-join","dir":"Reference","previous_headings":"","what":"Inner join","title":"Mutating joins — full_join","text":"inner_join() keeps observations x matching key y. important property inner join unmatched rows either input included result. means generally inner joins appropriate analyses, easy lose observations.","code":""},{"path":"/reference/full_join.html","id":"outer-joins","dir":"Reference","previous_headings":"","what":"Outer joins","title":"Mutating joins — full_join","text":"three outer joins keep observations appear least one data frames: left_join() keeps observations x. right_join() keeps observations y. full_join() keeps observations x y.","code":""},{"path":"/reference/full_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mutating joins — full_join","text":"","code":"# S3 method for class 'Seurat' full_join(x, y, by = NULL, copy = FALSE, suffix = c(\".x\", \".y\"), ...)"},{"path":"/reference/full_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mutating joins — full_join","text":"x, y pair data frames, data frame extensions (e.g. tibble), lazy data frames (e.g. dbplyr dtplyr). See Methods, , details. join specification created join_by(), character vector variables join . NULL, default, *_join() perform natural join, using variables common across x y. message lists variables can check correct; suppress message supplying explicitly. join different variables x y, use join_by() specification. example, join_by(== b) match x$y$b. join multiple variables, use join_by() specification multiple expressions. example, join_by(== b, c == d) match x$y$b x$c y$d. column names x y, can shorten listing variable names, like join_by(, c). join_by() can also used perform inequality, rolling, overlap joins. See documentation ?join_by details types joins. simple equality joins, can alternatively specify character vector variable names join . example, = c(\"\", \"b\") joins x$y$x$b y$b. variable names differ x y, use named character vector like = c(\"x_a\" = \"y_a\", \"x_b\" = \"y_b\"). perform cross-join, generating combinations x y, see cross_join(). copy x y data source, copy TRUE, y copied src x.  allows join tables across srcs, potentially expensive operation must opt . suffix non-joined duplicate variables x y, suffixes added output disambiguate . character vector length 2. ... parameters passed onto methods.","code":""},{"path":"/reference/full_join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mutating joins — full_join","text":"object type x (including groups). order rows columns x preserved much possible. output following properties: rows affect join type. inner_join() returns matched x rows. left_join() returns x rows. right_join()  returns matched x rows, followed unmatched y rows. full_join()  returns x rows, followed unmatched y rows. Output columns include columns x non-key columns y. keep = TRUE, key columns y included well. non-key columns x y name, suffixes added disambiguate. keep = TRUE key columns x y name, suffixes added disambiguate well. keep = FALSE, output columns included coerced common type x y.","code":""},{"path":"/reference/full_join.html","id":"many-to-many-relationships","dir":"Reference","previous_headings":"","what":"Many-to-many relationships","title":"Mutating joins — full_join","text":"default, dplyr guards many--many relationships equality joins throwing warning. occur following true: row x matches multiple rows y. row y matches multiple rows x. typically surprising, joins involve relationship one--one, one--many, many--one, often result improperly specified join. Many--many relationships particularly problematic can result Cartesian explosion number rows returned join. many--many relationship expected, silence warning explicitly setting relationship = \"many--many\". production code, best preemptively set relationship whatever relationship expect exist keys x y, forces error occur immediately data align expectations. Inequality joins typically result many--many relationships nature, warn default, still take extra care specifying inequality join, also capability return large number rows. Rolling joins warn many--many relationships either, many rolling joins follow many--one relationship, often useful set relationship = \"many--one\" enforce . Note SQL, database providers let specify many--many relationship two tables, instead requiring create third junction table results two one--many relationships instead.","code":""},{"path":"/reference/full_join.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Mutating joins — full_join","text":"functions generics, means packages can provide implementations (methods) classes. See documentation individual methods extra arguments differences behaviour. Methods available currently loaded packages: inner_join(): dplyr (data.frame), tidyseurat (Seurat) . left_join(): dplyr (data.frame), tidyseurat (Seurat) . right_join(): dplyr (data.frame), tidyseurat (Seurat) . full_join(): dplyr (data.frame), tidyseurat (Seurat) .","code":""},{"path":[]},{"path":"/reference/full_join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mutating joins — full_join","text":"","code":"data(pbmc_small) tt <- pbmc_small tt |> full_join(tibble::tibble(groups=\"g1\", other=1:4)) #> Joining with `by = join_by(groups)` #> tidyseurat says: This operation lead to duplicated cell names. A data frame is returned for independent data analysis. #> # A tibble: 212 × 30 #>    .cell orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups #>    <chr> <fct>           <dbl>        <int> <fct>           <fct>         <chr>  #>  1 ATGC… SeuratPro…         70           47 0               A             g2     #>  2 CATG… SeuratPro…         85           52 0               A             g1     #>  3 CATG… SeuratPro…         85           52 0               A             g1     #>  4 CATG… SeuratPro…         85           52 0               A             g1     #>  5 CATG… SeuratPro…         85           52 0               A             g1     #>  6 GAAC… SeuratPro…         87           50 1               B             g2     #>  7 TGAC… SeuratPro…        127           56 0               A             g2     #>  8 AGTC… SeuratPro…        173           53 0               A             g2     #>  9 TCTG… SeuratPro…         70           48 0               A             g1     #> 10 TCTG… SeuratPro…         70           48 0               A             g1     #> # ℹ 202 more rows #> # ℹ 23 more variables: RNA_snn_res.1 <fct>, PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, #> #   PC_4 <dbl>, PC_5 <dbl>, PC_6 <dbl>, PC_7 <dbl>, PC_8 <dbl>, PC_9 <dbl>, #> #   PC_10 <dbl>, PC_11 <dbl>, PC_12 <dbl>, PC_13 <dbl>, PC_14 <dbl>, #> #   PC_15 <dbl>, PC_16 <dbl>, PC_17 <dbl>, PC_18 <dbl>, PC_19 <dbl>, #> #   tSNE_1 <dbl>, tSNE_2 <dbl>, other <int>"},{"path":"/reference/get_abundance_sc_long.html","id":null,"dir":"Reference","previous_headings":"","what":"get abundance long — get_abundance_sc_long","title":"get abundance long — get_abundance_sc_long","text":"get abundance long","code":""},{"path":"/reference/get_abundance_sc_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get abundance long — get_abundance_sc_long","text":"","code":"get_abundance_sc_long(   .data,   features = NULL,   all = FALSE,   exclude_zeros = FALSE,   assay = Assays(.data),   slot = \"data\" )"},{"path":"/reference/get_abundance_sc_long.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get abundance long — get_abundance_sc_long","text":".data tidyseurat features character boolean exclude_zeros boolean assay assay name extract feature abundance slot slot assay, e.g. `data` `scale.data`","code":""},{"path":"/reference/get_abundance_sc_long.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get abundance long — get_abundance_sc_long","text":"Seurat object","code":""},{"path":"/reference/get_abundance_sc_long.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get abundance long — get_abundance_sc_long","text":"","code":"data(pbmc_small) pbmc_small %>%   get_abundance_sc_long(features=c(\"HLA-DRA\", \"LYZ\")) #> # A tibble: 160 × 3 #>    .feature .cell          .abundance_RNA #>    <chr>    <chr>                   <dbl> #>  1 HLA-DRA  ATGCCAGAACGACT           0    #>  2 HLA-DRA  CATGGCCTGTGCAT           4.78 #>  3 HLA-DRA  GAACCTGATGAACC           0    #>  4 HLA-DRA  TGACTGGATTCTCA           0    #>  5 HLA-DRA  AGTCAGACTGCACA           4.07 #>  6 HLA-DRA  TCTGATACACGTGT           4.97 #>  7 HLA-DRA  TGGTATCTAAACAG           0    #>  8 HLA-DRA  GCAGCTCTGTTTCT           4.94 #>  9 HLA-DRA  GATATAACACGCAT           0    #> 10 HLA-DRA  AATGTTGACAGTCA           0    #> # ℹ 150 more rows"},{"path":"/reference/get_abundance_sc_wide.html","id":null,"dir":"Reference","previous_headings":"","what":"get abundance wide — get_abundance_sc_wide","title":"get abundance wide — get_abundance_sc_wide","text":"get abundance wide","code":""},{"path":"/reference/get_abundance_sc_wide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get abundance wide — get_abundance_sc_wide","text":"","code":"get_abundance_sc_wide(   .data,   features = NULL,   all = FALSE,   assay = .data@active.assay,   slot = \"data\",   prefix = \"\" )"},{"path":"/reference/get_abundance_sc_wide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get abundance wide — get_abundance_sc_wide","text":".data tidyseurat features character boolean assay assay name extract feature abundance slot slot assay, e.g. `data` `scale.data` prefix prefix feature names","code":""},{"path":"/reference/get_abundance_sc_wide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get abundance wide — get_abundance_sc_wide","text":"Seurat object","code":""},{"path":"/reference/get_abundance_sc_wide.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get abundance wide — get_abundance_sc_wide","text":"","code":"data(pbmc_small) pbmc_small %>%   get_abundance_sc_wide(features=c(\"HLA-DRA\", \"LYZ\")) #> # A tibble: 80 × 3 #>    .cell          `HLA-DRA`   LYZ #>    <chr>              <dbl> <dbl> #>  1 ATGCCAGAACGACT      0     4.97 #>  2 CATGGCCTGTGCAT      4.78  4.78 #>  3 GAACCTGATGAACC      0     4.75 #>  4 TGACTGGATTCTCA      0     0    #>  5 AGTCAGACTGCACA      4.07  0    #>  6 TCTGATACACGTGT      4.97  4.97 #>  7 TGGTATCTAAACAG      0     0    #>  8 GCAGCTCTGTTTCT      4.94  0    #>  9 GATATAACACGCAT      0     5.26 #> 10 AATGTTGACAGTCA      0     0    #> # ℹ 70 more rows"},{"path":"/reference/ggplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new ggplot from a tidyseurat — ggplot","title":"Create a new ggplot from a tidyseurat — ggplot","text":"ggplot() initializes ggplot object. can used declare input data frame graphic specify set plot aesthetics intended common throughout subsequent layers unless specifically overridden.","code":""},{"path":"/reference/ggplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new ggplot from a tidyseurat — ggplot","text":"","code":"# S3 method for class 'Seurat' ggplot(data = NULL, mapping = aes(), ..., environment = parent.frame())"},{"path":"/reference/ggplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new ggplot from a tidyseurat — ggplot","text":"data Default dataset use plot. already data.frame, converted one fortify(). specified, must supplied layer added plot. mapping Default list aesthetic mappings use plot. specified, must supplied layer added plot. ... arguments passed methods. currently used. environment Used prior tidy evaluation.","code":""},{"path":"/reference/ggplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new ggplot from a tidyseurat — ggplot","text":"`ggplot`","code":""},{"path":"/reference/ggplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a new ggplot from a tidyseurat — ggplot","text":"ggplot() used construct initial plot object, almost always followed plus sign (+) add components plot. three common patterns used invoke ggplot(): ggplot(data = df, mapping = aes(x, y, aesthetics)) ggplot(data = df) ggplot() first pattern recommended layers use data set aesthetics, although method can also used adding layer using data another data frame. second pattern specifies default data frame use plot, aesthetics defined front. useful one data frame used predominantly plot, aesthetics vary one layer another. third pattern initializes skeleton ggplot object, fleshed layers added. useful multiple data frames used produce different layers, often case complex graphics. data = mapping = specifications arguments optional (often omitted practice), long data mapping values passed function right order. examples , however, left place clarity.","code":""},{"path":[]},{"path":"/reference/ggplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new ggplot from a tidyseurat — ggplot","text":"","code":"library(ggplot2) data(pbmc_small) pbmc_small |>    ggplot(aes(groups, nCount_RNA)) +   geom_boxplot()"},{"path":"/reference/glimpse.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a glimpse of your data — glimpse","title":"Get a glimpse of your data — glimpse","text":"glimpse() like transposed version print(): columns run page, data runs across. makes possible see every column data frame. little like str() applied data frame tries show much data possible. (always shows underlying data, even applied remote data source.) See format_glimpse() details formatting.","code":""},{"path":"/reference/glimpse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a glimpse of your data — glimpse","text":"","code":"# S3 method for class 'tidyseurat' glimpse(x, width = NULL, ...)"},{"path":"/reference/glimpse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a glimpse of your data — glimpse","text":"x object glimpse . width Width output: defaults setting width option (finite) width console. ... Unused, extensibility.","code":""},{"path":"/reference/glimpse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a glimpse of your data — glimpse","text":"x original x (invisibly) returned, allowing glimpse() used within data pipe line.","code":""},{"path":"/reference/glimpse.html","id":"s-methods","dir":"Reference","previous_headings":"","what":"S3 methods","title":"Get a glimpse of your data — glimpse","text":"glimpse S3 generic customised method tbls data.frames, default method calls str().","code":""},{"path":"/reference/glimpse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a glimpse of your data — glimpse","text":"","code":"data(pbmc_small) pbmc_small |> glimpse() #> Formal class 'Seurat' [package \"SeuratObject\"] with 13 slots #>   ..@ assays      :List of 1 #>   .. ..$ RNA:Formal class 'Assay' [package \"SeuratObject\"] with 8 slots #>   ..@ meta.data   :'data.frame':\t80 obs. of  7 variables: #>   .. ..$ orig.ident     : Factor w/ 1 level \"SeuratProject\": 1 1 1 1 1 1 1 1 1 1 ... #>   .. ..$ nCount_RNA     : num [1:80] 70 85 87 127 173 70 64 72 52 100 ... #>   .. ..$ nFeature_RNA   : int [1:80] 47 52 50 56 53 48 36 45 36 41 ... #>   .. ..$ RNA_snn_res.0.8: Factor w/ 2 levels \"0\",\"1\": 1 1 2 1 1 1 1 1 1 1 ... #>   .. ..$ letter.idents  : Factor w/ 2 levels \"A\",\"B\": 1 1 2 1 1 1 1 1 1 1 ... #>   .. ..$ groups         : chr [1:80] \"g2\" \"g1\" \"g2\" \"g2\" ... #>   .. ..$ RNA_snn_res.1  : Factor w/ 3 levels \"0\",\"1\",\"2\": 1 1 1 1 1 1 1 1 1 1 ... #>   ..@ active.assay: chr \"RNA\" #>   ..@ active.ident: Factor w/ 3 levels \"0\",\"1\",\"2\": 1 1 1 1 1 1 1 1 1 1 ... #>   .. ..- attr(*, \"names\")= chr [1:80] \"ATGCCAGAACGACT\" \"CATGGCCTGTGCAT\" \"GAACCTGATGAACC\" \"TGACTGGATTCTCA\" ... #>   ..@ graphs      :List of 1 #>   .. ..$ RNA_snn:Formal class 'Graph' [package \"SeuratObject\"] with 7 slots #>   ..@ neighbors   : list() #>   ..@ reductions  :List of 2 #>   .. ..$ pca :Formal class 'DimReduc' [package \"SeuratObject\"] with 9 slots #>   .. ..$ tsne:Formal class 'DimReduc' [package \"SeuratObject\"] with 9 slots #>   ..@ images      : list() #>   ..@ project.name: chr \"SeuratProject\" #>   ..@ misc        : list() #>   ..@ version     :Classes 'package_version', 'numeric_version'  hidden list of 1 #>   .. ..$ : int [1:3] 4 0 0 #>   ..@ commands    :List of 10 #>   .. ..$ NormalizeData.RNA       :Formal class 'SeuratCommand' [package \"SeuratObject\"] with 5 slots #>   .. ..$ ScaleData.RNA           :Formal class 'SeuratCommand' [package \"SeuratObject\"] with 5 slots #>   .. ..$ RunPCA.RNA              :Formal class 'SeuratCommand' [package \"SeuratObject\"] with 5 slots #>   .. ..$ BuildSNN.RNA.pca        :Formal class 'SeuratCommand' [package \"SeuratObject\"] with 5 slots #>   .. ..$ FindClusters            :Formal class 'SeuratCommand' [package \"SeuratObject\"] with 5 slots #>   .. ..$ RunTSNE.pca             :Formal class 'SeuratCommand' [package \"SeuratObject\"] with 5 slots #>   .. ..$ JackStraw.RNA.pca       :Formal class 'SeuratCommand' [package \"SeuratObject\"] with 5 slots #>   .. ..$ ScoreJackStraw.pca      :Formal class 'SeuratCommand' [package \"SeuratObject\"] with 5 slots #>   .. ..$ ProjectDim.RNA.pca      :Formal class 'SeuratCommand' [package \"SeuratObject\"] with 5 slots #>   .. ..$ FindVariableFeatures.RNA:Formal class 'SeuratCommand' [package \"SeuratObject\"] with 5 slots #>   ..@ tools       : list()"},{"path":"/reference/group_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Group by one or more variables — group_by","title":"Group by one or more variables — group_by","text":"data operations done groups defined variables. group_by() takes existing tbl converts grouped tbl operations performed \"group\". ungroup() removes grouping.","code":""},{"path":"/reference/group_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group by one or more variables — group_by","text":"","code":"# S3 method for class 'Seurat' group_by(.data, ..., .add = FALSE, .drop = group_by_drop_default(.data))"},{"path":"/reference/group_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group by one or more variables — group_by","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... group_by(), variables computations group . Computations always done ungrouped data frame. perform computations grouped data, need use separate mutate() step group_by(). Computations allowed nest_by(). ungroup(), variables remove grouping. .add FALSE, default, group_by() override existing groups. add existing groups, use .add = TRUE. argument previously called add, prevented creating new grouping variable called add, conflicts naming conventions. .drop Drop groups formed factor levels appear data? default TRUE except .data previously grouped .drop = FALSE. See group_by_drop_default() details.","code":""},{"path":"/reference/group_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group by one or more variables — group_by","text":"grouped data frame class grouped_df, unless combination ... add yields empty set grouping columns, case tibble returned.","code":""},{"path":"/reference/group_by.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Group by one or more variables — group_by","text":"function generics, means packages can provide implementations (methods) classes. See documentation individual methods extra arguments differences behaviour. Methods available currently loaded packages: group_by(): dplyr (data.frame), plotly (plotly), tidyseurat (Seurat) . ungroup(): dplyr (data.frame, grouped_df, rowwise_df), plotly (plotly) .","code":""},{"path":"/reference/group_by.html","id":"ordering","dir":"Reference","previous_headings":"","what":"Ordering","title":"Group by one or more variables — group_by","text":"Currently, group_by() internally orders groups ascending order. results ordered output functions aggregate groups, summarise(). used grouping columns, character vectors ordered C locale performance reproducibility across R sessions. resulting ordering grouped operation matters dependent locale, follow grouped operation explicit call arrange() set .locale argument. example:   often useful preliminary step generating content intended humans, HTML table.","code":"data %>%   group_by(chr) %>%   summarise(avg = mean(x)) %>%   arrange(chr, .locale = \"en\")"},{"path":"/reference/group_by.html","id":"legacy-behavior","dir":"Reference","previous_headings":"","what":"Legacy behavior","title":"Group by one or more variables — group_by","text":"Prior dplyr 1.1.0, character vector grouping columns ordered system locale. need temporarily revert behavior, can set global option dplyr.legacy_locale TRUE, used sparingly expect option removed future version dplyr. better update existing code explicitly call arrange(.locale = ) instead. Note setting dplyr.legacy_locale also force calls arrange() use system locale.","code":""},{"path":[]},{"path":"/reference/group_by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group by one or more variables — group_by","text":"","code":"data(\"pbmc_small\") pbmc_small |>  group_by(groups) #> tidyseurat says: A data frame is returned for independent data analysis. #> # A tibble: 80 × 29 #> # Groups:   groups [2] #>    .cell orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups #>    <chr> <fct>           <dbl>        <int> <fct>           <fct>         <chr>  #>  1 ATGC… SeuratPro…         70           47 0               A             g2     #>  2 CATG… SeuratPro…         85           52 0               A             g1     #>  3 GAAC… SeuratPro…         87           50 1               B             g2     #>  4 TGAC… SeuratPro…        127           56 0               A             g2     #>  5 AGTC… SeuratPro…        173           53 0               A             g2     #>  6 TCTG… SeuratPro…         70           48 0               A             g1     #>  7 TGGT… SeuratPro…         64           36 0               A             g1     #>  8 GCAG… SeuratPro…         72           45 0               A             g1     #>  9 GATA… SeuratPro…         52           36 0               A             g1     #> 10 AATG… SeuratPro…        100           41 0               A             g1     #> # ℹ 70 more rows #> # ℹ 22 more variables: RNA_snn_res.1 <fct>, PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, #> #   PC_4 <dbl>, PC_5 <dbl>, PC_6 <dbl>, PC_7 <dbl>, PC_8 <dbl>, PC_9 <dbl>, #> #   PC_10 <dbl>, PC_11 <dbl>, PC_12 <dbl>, PC_13 <dbl>, PC_14 <dbl>, #> #   PC_15 <dbl>, PC_16 <dbl>, PC_17 <dbl>, PC_18 <dbl>, PC_19 <dbl>, #> #   tSNE_1 <dbl>, tSNE_2 <dbl>"},{"path":"/reference/group_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Split data frame by groups — group_split","title":"Split data frame by groups — group_split","text":"group_split() works like base::split() : uses grouping structure group_by() therefore subject data mask name elements list based grouping works well single character grouping variable. Instead, use group_keys() access data frame defines groups. group_split() primarily designed work grouped data frames. can pass ... group split ungrouped data frame, generally useful want easy access group metadata.","code":""},{"path":"/reference/group_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split data frame by groups — group_split","text":"","code":"# S3 method for class 'Seurat' group_split(.tbl, ..., .keep = TRUE)"},{"path":"/reference/group_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split data frame by groups — group_split","text":".tbl tbl. ... .tbl ungrouped data frame, grouping specification, forwarded group_by(). .keep grouping columns kept?","code":""},{"path":"/reference/group_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split data frame by groups — group_split","text":"list tibbles. tibble contains rows .tbl associated group columns, including grouping variables. Note returns list_of slightly stricter simple list useful representing lists every element type.","code":""},{"path":"/reference/group_split.html","id":"lifecycle","dir":"Reference","previous_headings":"","what":"Lifecycle","title":"Split data frame by groups — group_split","text":"group_split() stable can achieve similar results manipulating nested column returned tidyr::nest(.=). also retains group keys within single data structure. group_split() may deprecated future.","code":""},{"path":[]},{"path":"/reference/group_split.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split data frame by groups — group_split","text":"","code":"data(pbmc_small) pbmc_small |> group_split(groups) #> [[1]] #> # A Seurat-tibble abstraction: 44 × 15 #> # Features=230 | Cells=44 | Active assay=RNA | Assays=RNA #>    .cell orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups #>    <chr> <fct>           <dbl>        <int> <fct>           <fct>         <chr>  #>  1 CATG… SeuratPro…         85           52 0               A             g1     #>  2 TCTG… SeuratPro…         70           48 0               A             g1     #>  3 TGGT… SeuratPro…         64           36 0               A             g1     #>  4 GCAG… SeuratPro…         72           45 0               A             g1     #>  5 GATA… SeuratPro…         52           36 0               A             g1     #>  6 AATG… SeuratPro…        100           41 0               A             g1     #>  7 AGAG… SeuratPro…        191           61 0               A             g1     #>  8 CTAA… SeuratPro…        168           44 0               A             g1     #>  9 TTGG… SeuratPro…        135           45 0               A             g1     #> 10 CATC… SeuratPro…         79           43 0               A             g1     #> # ℹ 34 more rows #> # ℹ 8 more variables: RNA_snn_res.1 <fct>, PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, #> #   PC_4 <dbl>, PC_5 <dbl>, tSNE_1 <dbl>, tSNE_2 <dbl> #>  #> [[2]] #> # A Seurat-tibble abstraction: 36 × 15 #> # Features=230 | Cells=36 | Active assay=RNA | Assays=RNA #>    .cell orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups #>    <chr> <fct>           <dbl>        <int> <fct>           <fct>         <chr>  #>  1 ATGC… SeuratPro…         70           47 0               A             g2     #>  2 GAAC… SeuratPro…         87           50 1               B             g2     #>  3 TGAC… SeuratPro…        127           56 0               A             g2     #>  4 AGTC… SeuratPro…        173           53 0               A             g2     #>  5 AGGT… SeuratPro…         62           31 0               A             g2     #>  6 GGGT… SeuratPro…        101           41 0               A             g2     #>  7 CATG… SeuratPro…         51           26 0               A             g2     #>  8 TACG… SeuratPro…         99           45 0               A             g2     #>  9 GTAA… SeuratPro…         67           33 0               A             g2     #> 10 TACA… SeuratPro…        109           41 0               A             g2     #> # ℹ 26 more rows #> # ℹ 8 more variables: RNA_snn_res.1 <fct>, PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, #> #   PC_4 <dbl>, PC_5 <dbl>, tSNE_1 <dbl>, tSNE_2 <dbl> #>"},{"path":"/reference/inner_join.html","id":null,"dir":"Reference","previous_headings":"","what":"Mutating joins — inner_join","title":"Mutating joins — inner_join","text":"Mutating joins add columns y x, matching observations based keys. four mutating joins: inner join, three outer joins.","code":""},{"path":"/reference/inner_join.html","id":"inner-join","dir":"Reference","previous_headings":"","what":"Inner join","title":"Mutating joins — inner_join","text":"inner_join() keeps observations x matching key y. important property inner join unmatched rows either input included result. means generally inner joins appropriate analyses, easy lose observations.","code":""},{"path":"/reference/inner_join.html","id":"outer-joins","dir":"Reference","previous_headings":"","what":"Outer joins","title":"Mutating joins — inner_join","text":"three outer joins keep observations appear least one data frames: left_join() keeps observations x. right_join() keeps observations y. full_join() keeps observations x y.","code":""},{"path":"/reference/inner_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mutating joins — inner_join","text":"","code":"# S3 method for class 'Seurat' inner_join(x, y, by = NULL, copy = FALSE, suffix = c(\".x\", \".y\"), ...)"},{"path":"/reference/inner_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mutating joins — inner_join","text":"x, y pair data frames, data frame extensions (e.g. tibble), lazy data frames (e.g. dbplyr dtplyr). See Methods, , details. join specification created join_by(), character vector variables join . NULL, default, *_join() perform natural join, using variables common across x y. message lists variables can check correct; suppress message supplying explicitly. join different variables x y, use join_by() specification. example, join_by(== b) match x$y$b. join multiple variables, use join_by() specification multiple expressions. example, join_by(== b, c == d) match x$y$b x$c y$d. column names x y, can shorten listing variable names, like join_by(, c). join_by() can also used perform inequality, rolling, overlap joins. See documentation ?join_by details types joins. simple equality joins, can alternatively specify character vector variable names join . example, = c(\"\", \"b\") joins x$y$x$b y$b. variable names differ x y, use named character vector like = c(\"x_a\" = \"y_a\", \"x_b\" = \"y_b\"). perform cross-join, generating combinations x y, see cross_join(). copy x y data source, copy TRUE, y copied src x.  allows join tables across srcs, potentially expensive operation must opt . suffix non-joined duplicate variables x y, suffixes added output disambiguate . character vector length 2. ... parameters passed onto methods.","code":""},{"path":"/reference/inner_join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mutating joins — inner_join","text":"object type x (including groups). order rows columns x preserved much possible. output following properties: rows affect join type. inner_join() returns matched x rows. left_join() returns x rows. right_join()  returns matched x rows, followed unmatched y rows. full_join()  returns x rows, followed unmatched y rows. Output columns include columns x non-key columns y. keep = TRUE, key columns y included well. non-key columns x y name, suffixes added disambiguate. keep = TRUE key columns x y name, suffixes added disambiguate well. keep = FALSE, output columns included coerced common type x y.","code":""},{"path":"/reference/inner_join.html","id":"many-to-many-relationships","dir":"Reference","previous_headings":"","what":"Many-to-many relationships","title":"Mutating joins — inner_join","text":"default, dplyr guards many--many relationships equality joins throwing warning. occur following true: row x matches multiple rows y. row y matches multiple rows x. typically surprising, joins involve relationship one--one, one--many, many--one, often result improperly specified join. Many--many relationships particularly problematic can result Cartesian explosion number rows returned join. many--many relationship expected, silence warning explicitly setting relationship = \"many--many\". production code, best preemptively set relationship whatever relationship expect exist keys x y, forces error occur immediately data align expectations. Inequality joins typically result many--many relationships nature, warn default, still take extra care specifying inequality join, also capability return large number rows. Rolling joins warn many--many relationships either, many rolling joins follow many--one relationship, often useful set relationship = \"many--one\" enforce . Note SQL, database providers let specify many--many relationship two tables, instead requiring create third junction table results two one--many relationships instead.","code":""},{"path":"/reference/inner_join.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Mutating joins — inner_join","text":"functions generics, means packages can provide implementations (methods) classes. See documentation individual methods extra arguments differences behaviour. Methods available currently loaded packages: inner_join(): dplyr (data.frame), tidyseurat (Seurat) . left_join(): dplyr (data.frame), tidyseurat (Seurat) . right_join(): dplyr (data.frame), tidyseurat (Seurat) . full_join(): dplyr (data.frame), tidyseurat (Seurat) .","code":""},{"path":[]},{"path":"/reference/inner_join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mutating joins — inner_join","text":"","code":"data(pbmc_small) tt <- pbmc_small tt |> inner_join(tt |>    distinct(groups) |>     mutate(new_column=1:2) |>    slice(1)) #> tidyseurat says: A data frame is returned for independent data analysis. #> Joining with `by = join_by(groups)` #> # A Seurat-tibble abstraction: 36 × 16 #> # Features=230 | Cells=36 | Active assay=RNA | Assays=RNA #>    .cell orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups #>    <chr> <fct>           <dbl>        <int> <fct>           <fct>         <chr>  #>  1 ATGC… SeuratPro…         70           47 0               A             g2     #>  2 GAAC… SeuratPro…         87           50 1               B             g2     #>  3 TGAC… SeuratPro…        127           56 0               A             g2     #>  4 AGTC… SeuratPro…        173           53 0               A             g2     #>  5 AGGT… SeuratPro…         62           31 0               A             g2     #>  6 GGGT… SeuratPro…        101           41 0               A             g2     #>  7 CATG… SeuratPro…         51           26 0               A             g2     #>  8 TACG… SeuratPro…         99           45 0               A             g2     #>  9 GTAA… SeuratPro…         67           33 0               A             g2     #> 10 TACA… SeuratPro…        109           41 0               A             g2     #> # ℹ 26 more rows #> # ℹ 9 more variables: RNA_snn_res.1 <fct>, new_column <int>, PC_1 <dbl>, #> #   PC_2 <dbl>, PC_3 <dbl>, PC_4 <dbl>, PC_5 <dbl>, tSNE_1 <dbl>, tSNE_2 <dbl>"},{"path":"/reference/join_features.html","id":null,"dir":"Reference","previous_headings":"","what":"join_features — join_features","title":"join_features — join_features","text":"join_features() extracts joins information specific   features","code":""},{"path":"/reference/join_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"join_features — join_features","text":"","code":"# S4 method for class 'Seurat' join_features(   .data,   features = NULL,   all = FALSE,   exclude_zeros = FALSE,   shape = \"wide\",   assay = NULL,   slot = \"data\",   ... )"},{"path":"/reference/join_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"join_features — join_features","text":".data tidyseurat object features vector feature identifiers join TRUE return exclude_zeros TRUE exclude zero values shape Format returned table \"long\" \"wide\" assay assay name extract feature abundance slot slot name extract feature abundance ... Parameters pass join wide, .e. assay name extract feature abundance gene prefix, shape=\"wide\"","code":""},{"path":"/reference/join_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"join_features — join_features","text":"`tidyseurat` object   containing information specified features.","code":""},{"path":"/reference/join_features.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"join_features — join_features","text":"function extracts information specified features   returns information either long wide format.","code":""},{"path":"/reference/join_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"join_features — join_features","text":"","code":"data(pbmc_small) pbmc_small %>% join_features(   features=c(\"HLA-DRA\", \"LYZ\")) #> # A Seurat-tibble abstraction: 80 × 17 #> # Features=230 | Cells=80 | Active assay=RNA | Assays=RNA #>    .cell orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups #>    <chr> <fct>           <dbl>        <int> <fct>           <fct>         <chr>  #>  1 ATGC… SeuratPro…         70           47 0               A             g2     #>  2 CATG… SeuratPro…         85           52 0               A             g1     #>  3 GAAC… SeuratPro…         87           50 1               B             g2     #>  4 TGAC… SeuratPro…        127           56 0               A             g2     #>  5 AGTC… SeuratPro…        173           53 0               A             g2     #>  6 TCTG… SeuratPro…         70           48 0               A             g1     #>  7 TGGT… SeuratPro…         64           36 0               A             g1     #>  8 GCAG… SeuratPro…         72           45 0               A             g1     #>  9 GATA… SeuratPro…         52           36 0               A             g1     #> 10 AATG… SeuratPro…        100           41 0               A             g1     #> # ℹ 70 more rows #> # ℹ 10 more variables: RNA_snn_res.1 <fct>, `HLA-DRA` <dbl>, LYZ <dbl>, #> #   PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, PC_4 <dbl>, PC_5 <dbl>, tSNE_1 <dbl>, #> #   tSNE_2 <dbl>"},{"path":"/reference/join_transcripts.html","id":null,"dir":"Reference","previous_headings":"","what":"(DEPRECATED) Extract and join information for transcripts. — join_transcripts","title":"(DEPRECATED) Extract and join information for transcripts. — join_transcripts","text":"join_transcripts() extracts joins information specified transcripts","code":""},{"path":"/reference/join_transcripts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(DEPRECATED) Extract and join information for transcripts. — join_transcripts","text":"","code":"join_transcripts(   .data,   transcripts = NULL,   all = FALSE,   exclude_zeros = FALSE,   shape = \"wide\",   ... )"},{"path":"/reference/join_transcripts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(DEPRECATED) Extract and join information for transcripts. — join_transcripts","text":".data tidyseurat object transcripts vector transcript identifiers join TRUE return exclude_zeros TRUE exclude zero values shape Format returned table \"long\" \"wide\" ... Parameters pass join wide, .e. assay name extract transcript abundance ","code":""},{"path":"/reference/join_transcripts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(DEPRECATED) Extract and join information for transcripts. — join_transcripts","text":"`tbl` containing information.specified transcripts","code":""},{"path":"/reference/join_transcripts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(DEPRECATED) Extract and join information for transcripts. — join_transcripts","text":"DEPRECATED, please use join_features()","code":""},{"path":"/reference/join_transcripts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(DEPRECATED) Extract and join information for transcripts. — join_transcripts","text":"","code":"print(\"DEPRECATED\") #> [1] \"DEPRECATED\""},{"path":"/reference/left_join.html","id":null,"dir":"Reference","previous_headings":"","what":"Mutating joins — left_join","title":"Mutating joins — left_join","text":"Mutating joins add columns y x, matching observations based keys. four mutating joins: inner join, three outer joins.","code":""},{"path":"/reference/left_join.html","id":"inner-join","dir":"Reference","previous_headings":"","what":"Inner join","title":"Mutating joins — left_join","text":"inner_join() keeps observations x matching key y. important property inner join unmatched rows either input included result. means generally inner joins appropriate analyses, easy lose observations.","code":""},{"path":"/reference/left_join.html","id":"outer-joins","dir":"Reference","previous_headings":"","what":"Outer joins","title":"Mutating joins — left_join","text":"three outer joins keep observations appear least one data frames: left_join() keeps observations x. right_join() keeps observations y. full_join() keeps observations x y.","code":""},{"path":"/reference/left_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mutating joins — left_join","text":"","code":"# S3 method for class 'Seurat' left_join(x, y, by = NULL, copy = FALSE, suffix = c(\".x\", \".y\"), ...)"},{"path":"/reference/left_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mutating joins — left_join","text":"x, y pair data frames, data frame extensions (e.g. tibble), lazy data frames (e.g. dbplyr dtplyr). See Methods, , details. join specification created join_by(), character vector variables join . NULL, default, *_join() perform natural join, using variables common across x y. message lists variables can check correct; suppress message supplying explicitly. join different variables x y, use join_by() specification. example, join_by(== b) match x$y$b. join multiple variables, use join_by() specification multiple expressions. example, join_by(== b, c == d) match x$y$b x$c y$d. column names x y, can shorten listing variable names, like join_by(, c). join_by() can also used perform inequality, rolling, overlap joins. See documentation ?join_by details types joins. simple equality joins, can alternatively specify character vector variable names join . example, = c(\"\", \"b\") joins x$y$x$b y$b. variable names differ x y, use named character vector like = c(\"x_a\" = \"y_a\", \"x_b\" = \"y_b\"). perform cross-join, generating combinations x y, see cross_join(). copy x y data source, copy TRUE, y copied src x.  allows join tables across srcs, potentially expensive operation must opt . suffix non-joined duplicate variables x y, suffixes added output disambiguate . character vector length 2. ... parameters passed onto methods.","code":""},{"path":"/reference/left_join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mutating joins — left_join","text":"object type x (including groups). order rows columns x preserved much possible. output following properties: rows affect join type. inner_join() returns matched x rows. left_join() returns x rows. right_join()  returns matched x rows, followed unmatched y rows. full_join()  returns x rows, followed unmatched y rows. Output columns include columns x non-key columns y. keep = TRUE, key columns y included well. non-key columns x y name, suffixes added disambiguate. keep = TRUE key columns x y name, suffixes added disambiguate well. keep = FALSE, output columns included coerced common type x y.","code":""},{"path":"/reference/left_join.html","id":"many-to-many-relationships","dir":"Reference","previous_headings":"","what":"Many-to-many relationships","title":"Mutating joins — left_join","text":"default, dplyr guards many--many relationships equality joins throwing warning. occur following true: row x matches multiple rows y. row y matches multiple rows x. typically surprising, joins involve relationship one--one, one--many, many--one, often result improperly specified join. Many--many relationships particularly problematic can result Cartesian explosion number rows returned join. many--many relationship expected, silence warning explicitly setting relationship = \"many--many\". production code, best preemptively set relationship whatever relationship expect exist keys x y, forces error occur immediately data align expectations. Inequality joins typically result many--many relationships nature, warn default, still take extra care specifying inequality join, also capability return large number rows. Rolling joins warn many--many relationships either, many rolling joins follow many--one relationship, often useful set relationship = \"many--one\" enforce . Note SQL, database providers let specify many--many relationship two tables, instead requiring create third junction table results two one--many relationships instead.","code":""},{"path":"/reference/left_join.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Mutating joins — left_join","text":"functions generics, means packages can provide implementations (methods) classes. See documentation individual methods extra arguments differences behaviour. Methods available currently loaded packages: inner_join(): dplyr (data.frame), tidyseurat (Seurat) . left_join(): dplyr (data.frame), tidyseurat (Seurat) . right_join(): dplyr (data.frame), tidyseurat (Seurat) . full_join(): dplyr (data.frame), tidyseurat (Seurat) .","code":""},{"path":[]},{"path":"/reference/left_join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mutating joins — left_join","text":"","code":"data(pbmc_small) tt <- pbmc_small tt |> left_join(tt |>     distinct(groups) |>    mutate(new_column=1:2)) #> tidyseurat says: A data frame is returned for independent data analysis. #> Joining with `by = join_by(groups)` #> # A Seurat-tibble abstraction: 80 × 16 #> # Features=230 | Cells=80 | Active assay=RNA | Assays=RNA #>    .cell orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups #>    <chr> <fct>           <dbl>        <int> <fct>           <fct>         <chr>  #>  1 ATGC… SeuratPro…         70           47 0               A             g2     #>  2 CATG… SeuratPro…         85           52 0               A             g1     #>  3 GAAC… SeuratPro…         87           50 1               B             g2     #>  4 TGAC… SeuratPro…        127           56 0               A             g2     #>  5 AGTC… SeuratPro…        173           53 0               A             g2     #>  6 TCTG… SeuratPro…         70           48 0               A             g1     #>  7 TGGT… SeuratPro…         64           36 0               A             g1     #>  8 GCAG… SeuratPro…         72           45 0               A             g1     #>  9 GATA… SeuratPro…         52           36 0               A             g1     #> 10 AATG… SeuratPro…        100           41 0               A             g1     #> # ℹ 70 more rows #> # ℹ 9 more variables: RNA_snn_res.1 <fct>, new_column <int>, PC_1 <dbl>, #> #   PC_2 <dbl>, PC_3 <dbl>, PC_4 <dbl>, PC_5 <dbl>, tSNE_1 <dbl>, tSNE_2 <dbl>"},{"path":"/reference/mutate.html","id":null,"dir":"Reference","previous_headings":"","what":"Create, modify, and delete columns — mutate","title":"Create, modify, and delete columns — mutate","text":"mutate() creates new columns functions existing variables. can also modify (name existing column) delete columns (setting value NULL).","code":""},{"path":"/reference/mutate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create, modify, and delete columns — mutate","text":"","code":"# S3 method for class 'Seurat' mutate(.data, ...)"},{"path":"/reference/mutate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create, modify, and delete columns — mutate","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... <data-masking> Name-value pairs. name gives name column output. value can : vector length 1, recycled correct length. vector length current group (whole data frame ungrouped). NULL, remove column. data frame tibble, create multiple columns output.","code":""},{"path":"/reference/mutate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create, modify, and delete columns — mutate","text":"object type .data. output following properties: Columns .data preserved according .keep argument. Existing columns modified ... always returned original location. New columns created ... placed according ..arguments. number rows affected. Columns given value NULL removed. Groups recomputed grouping variable mutated. Data frame attributes preserved.","code":""},{"path":"/reference/mutate.html","id":"useful-mutate-functions","dir":"Reference","previous_headings":"","what":"Useful mutate functions","title":"Create, modify, and delete columns — mutate","text":"+, -, log(), etc., usual mathematical meanings lead(), lag() dense_rank(), min_rank(), percent_rank(), row_number(), cume_dist(), ntile() cumsum(), cummean(), cummin(), cummax(), cumany(), cumall() na_if(), coalesce() if_else(), recode(), case_when()","code":""},{"path":"/reference/mutate.html","id":"grouped-tibbles","dir":"Reference","previous_headings":"","what":"Grouped tibbles","title":"Create, modify, and delete columns — mutate","text":"mutating expressions computed within groups, may yield different results grouped tibbles. case soon aggregating, lagging, ranking function involved. Compare ungrouped mutate:   grouped equivalent:   former normalises mass global average whereas latter normalises averages within species levels.","code":"starwars %>%   select(name, mass, species) %>%   mutate(mass_norm = mass / mean(mass, na.rm = TRUE)) starwars %>%   select(name, mass, species) %>%   group_by(species) %>%   mutate(mass_norm = mass / mean(mass, na.rm = TRUE))"},{"path":"/reference/mutate.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Create, modify, and delete columns — mutate","text":"function generic, means packages can provide implementations (methods) classes. See documentation individual methods extra arguments differences behaviour. Methods available currently loaded packages: dplyr (data.frame), plotly (plotly), tidyseurat (Seurat) .","code":""},{"path":[]},{"path":"/reference/mutate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create, modify, and delete columns — mutate","text":"","code":"data(pbmc_small) pbmc_small |> mutate(nFeature_RNA=1) #> # A Seurat-tibble abstraction: 80 × 15 #> # Features=230 | Cells=80 | Active assay=RNA | Assays=RNA #>    .cell orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups #>    <chr> <fct>           <dbl>        <dbl> <fct>           <fct>         <chr>  #>  1 ATGC… SeuratPro…         70            1 0               A             g2     #>  2 CATG… SeuratPro…         85            1 0               A             g1     #>  3 GAAC… SeuratPro…         87            1 1               B             g2     #>  4 TGAC… SeuratPro…        127            1 0               A             g2     #>  5 AGTC… SeuratPro…        173            1 0               A             g2     #>  6 TCTG… SeuratPro…         70            1 0               A             g1     #>  7 TGGT… SeuratPro…         64            1 0               A             g1     #>  8 GCAG… SeuratPro…         72            1 0               A             g1     #>  9 GATA… SeuratPro…         52            1 0               A             g1     #> 10 AATG… SeuratPro…        100            1 0               A             g1     #> # ℹ 70 more rows #> # ℹ 8 more variables: RNA_snn_res.1 <fct>, PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, #> #   PC_4 <dbl>, PC_5 <dbl>, tSNE_1 <dbl>, tSNE_2 <dbl>"},{"path":"/reference/nest.html","id":null,"dir":"Reference","previous_headings":"","what":"Nest rows into a list-column of data frames — nest","title":"Nest rows into a list-column of data frames — nest","text":"Nesting creates list-column data frames; unnesting flattens back regular columns. Nesting implicitly summarising operation: get one row group defined non-nested columns. useful conjunction summaries work whole datasets, notably models. Learn vignette(\"nest\").","code":""},{"path":"/reference/nest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nest rows into a list-column of data frames — nest","text":"","code":"# S3 method for class 'Seurat' nest(.data, ..., .names_sep = NULL)"},{"path":"/reference/nest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nest rows into a list-column of data frames — nest","text":".data data frame. ... <tidy-select> Columns nest; appear inner data frames. Specified using name-variable pairs form new_col = c(col1, col2, col3). right hand side can valid tidyselect expression. supplied, ... derived columns selected ., use column name .key. : previously write df %>% nest(x, y, z). Convert df %>% nest(data = c(x, y, z)). .names_sep NULL, default, inner names come former outer names. string,  new inner names use outer names names_sep automatically stripped. makes names_sep roughly symmetric nesting unnesting.","code":""},{"path":"/reference/nest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nest rows into a list-column of data frames — nest","text":"`tidyseurat_nested`","code":""},{"path":"/reference/nest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Nest rows into a list-column of data frames — nest","text":"neither ... .supplied, nest() nest variables, use column name supplied .key.","code":""},{"path":"/reference/nest.html","id":"new-syntax","dir":"Reference","previous_headings":"","what":"New syntax","title":"Nest rows into a list-column of data frames — nest","text":"tidyr 1.0.0 introduced new syntax nest() unnest() designed similar functions. Converting new syntax straightforward (guided message receive) just need run old analysis, can easily revert previous behaviour using nest_legacy() unnest_legacy() follows:","code":"library(tidyr) nest <- nest_legacy unnest <- unnest_legacy"},{"path":"/reference/nest.html","id":"grouped-data-frames","dir":"Reference","previous_headings":"","what":"Grouped data frames","title":"Nest rows into a list-column of data frames — nest","text":"df %>% nest(data = c(x, y)) specifies columns nested; .e. columns appear inner data frame. df %>% nest(.= c(x, y)) specifies columns nest ; .e. columns remain outer data frame. alternative way achieve latter nest() grouped data frame created dplyr::group_by(). grouping variables remain outer data frame others nested. result preserves grouping input. Variables supplied nest() override grouping variables df %>% group_by(x, y) %>% nest(data = !z) equivalent df %>% nest(data = !z). supply .grouped data frame, groups already represent nesting .","code":""},{"path":"/reference/nest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nest rows into a list-column of data frames — nest","text":"","code":"data(pbmc_small) pbmc_small |>      nest(data=-groups) |>      unnest(data) #> # A Seurat-tibble abstraction: 80 × 8 #> # Features=230 | Cells=80 | Active assay=RNA | Assays=RNA #>    .cell        orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents #>    <chr>        <chr>           <dbl>        <int> <chr>           <chr>         #>  1 ATGCCAGAACG… SeuratPro…         70           47 0               A             #>  2 GAACCTGATGA… SeuratPro…         87           50 1               B             #>  3 TGACTGGATTC… SeuratPro…        127           56 0               A             #>  4 AGTCAGACTGC… SeuratPro…        173           53 0               A             #>  5 AGGTCATGAGT… SeuratPro…         62           31 0               A             #>  6 GGGTAACTCTA… SeuratPro…        101           41 0               A             #>  7 CATGAGACACG… SeuratPro…         51           26 0               A             #>  8 TACGCCACTCC… SeuratPro…         99           45 0               A             #>  9 GTAAGCACTCA… SeuratPro…         67           33 0               A             #> 10 TACATCACGCT… SeuratPro…        109           41 0               A             #> # ℹ 70 more rows #> # ℹ 2 more variables: RNA_snn_res.1 <chr>, groups <chr>"},{"path":"/reference/pbmc_small_nested_interactions.html","id":null,"dir":"Reference","previous_headings":"","what":"Intercellular ligand-receptor interactions for 38 ligands from a single cell RNA-seq cluster. — pbmc_small_nested_interactions","title":"Intercellular ligand-receptor interactions for 38 ligands from a single cell RNA-seq cluster. — pbmc_small_nested_interactions","text":"dataset containing ligand-receptor interactions within sample. 38 ligands single cell cluster versus 35 receptors 6 clusters.","code":""},{"path":"/reference/pbmc_small_nested_interactions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Intercellular ligand-receptor interactions for 38 ligands from a single cell RNA-seq cluster. — pbmc_small_nested_interactions","text":"","code":"data(pbmc_small_nested_interactions)"},{"path":"/reference/pbmc_small_nested_interactions.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Intercellular ligand-receptor interactions for 38 ligands from a single cell RNA-seq cluster. — pbmc_small_nested_interactions","text":"`tibble` containing 100 rows 9 columns.   Cells subsample PBMC dataset 2,700 single cells.   Cell interactions identified `SingleCellSignalR`. sample sample identifier ligand cluster ligand identifier receptor cluster receptor identifier ligand.name ligand name receptor.name receptor name origin cluster containing ligand destination cluster containing receptor interaction.type type interation, paracrine autocrine LRscore interaction score","code":""},{"path":"/reference/pbmc_small_nested_interactions.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Intercellular ligand-receptor interactions for 38 ligands from a single cell RNA-seq cluster. — pbmc_small_nested_interactions","text":"https://satijalab.org/seurat/v3.1/pbmc3k_tutorial.html","code":""},{"path":"/reference/pbmc_small_nested_interactions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Intercellular ligand-receptor interactions for 38 ligands from a single cell RNA-seq cluster. — pbmc_small_nested_interactions","text":"`tibble`","code":""},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"void","code":""},{"path":"/reference/pipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipe operator — %>%","text":"","code":"data(pbmc_small) pbmc_small %>% print() #> # A Seurat-tibble abstraction: 80 × 15 #> # Features=230 | Cells=80 | Active assay=RNA | Assays=RNA #>    .cell orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups #>    <chr> <fct>           <dbl>        <int> <fct>           <fct>         <chr>  #>  1 ATGC… SeuratPro…         70           47 0               A             g2     #>  2 CATG… SeuratPro…         85           52 0               A             g1     #>  3 GAAC… SeuratPro…         87           50 1               B             g2     #>  4 TGAC… SeuratPro…        127           56 0               A             g2     #>  5 AGTC… SeuratPro…        173           53 0               A             g2     #>  6 TCTG… SeuratPro…         70           48 0               A             g1     #>  7 TGGT… SeuratPro…         64           36 0               A             g1     #>  8 GCAG… SeuratPro…         72           45 0               A             g1     #>  9 GATA… SeuratPro…         52           36 0               A             g1     #> 10 AATG… SeuratPro…        100           41 0               A             g1     #> # ℹ 70 more rows #> # ℹ 8 more variables: RNA_snn_res.1 <fct>, PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, #> #   PC_4 <dbl>, PC_5 <dbl>, tSNE_1 <dbl>, tSNE_2 <dbl>"},{"path":"/reference/pivot_longer.html","id":null,"dir":"Reference","previous_headings":"","what":"Pivot data from wide to long — pivot_longer","title":"Pivot data from wide to long — pivot_longer","text":"pivot_longer() \"lengthens\" data, increasing number rows decreasing number columns. inverse transformation pivot_wider() Learn vignette(\"pivot\").","code":""},{"path":"/reference/pivot_longer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pivot data from wide to long — pivot_longer","text":"","code":"# S3 method for class 'Seurat' pivot_longer(   data,   cols,   names_to = \"name\",   names_prefix = NULL,   names_sep = NULL,   names_pattern = NULL,   names_ptypes = NULL,   names_transform = NULL,   names_repair = \"check_unique\",   values_to = \"value\",   values_drop_na = FALSE,   values_ptypes = NULL,   values_transform = NULL,   ... )"},{"path":"/reference/pivot_longer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pivot data from wide to long — pivot_longer","text":"data data frame pivot. cols <tidy-select> Columns pivot longer format. names_to character vector specifying new column columns create information stored column names data specified cols. length 0, NULL supplied, columns created. length 1, single column created contain column names specified cols. length >1, multiple columns created. case, one names_sep names_pattern must supplied specify column names split. also two additional character values can take advantage : NA discard corresponding component column name. \".value\" indicates corresponding component column name defines name output column containing cell values, overriding values_to entirely. names_prefix regular expression used remove matching text start variable name. names_sep, names_pattern names_to contains multiple values, arguments control column name broken . names_sep takes specification separate(), can either numeric vector (specifying positions break ), single string (specifying regular expression split ). names_pattern takes specification extract(), regular expression containing matching groups (()). arguments give enough control, use pivot_longer_spec() create spec object process manually needed. names_ptypes, values_ptypes Optionally, list column name-prototype pairs. Alternatively, single empty prototype can supplied, applied columns. prototype (ptype short) zero-length vector (like integer() numeric()) defines type, class, attributes vector. Use arguments want confirm created columns types expect. Note want change (instead confirm) types specific columns, use names_transform values_transform instead. names_transform, values_transform Optionally, list column name-function pairs. Alternatively, single function can supplied, applied columns. Use arguments need change types specific columns. example, names_transform = list(week = .integer) convert character variable called week integer. specified, type columns generated names_to character, type variables generated values_to common type input columns used generate . names_repair happens output invalid column names? default, \"check_unique\" error columns duplicated. Use \"minimal\" allow duplicates output, \"unique\" de-duplicated adding numeric suffixes. See vctrs::vec_as_names() options. values_to string specifying name column create data stored cell values. names_to character containing special .value sentinel, value ignored, name value column derived part existing column names. values_drop_na TRUE, drop rows contain NAs value_to column. effectively converts explicit missing values implicit missing values, generally used missing values data created structure. ... Additional arguments passed methods.","code":""},{"path":"/reference/pivot_longer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pivot data from wide to long — pivot_longer","text":"`tidyseurat`","code":""},{"path":"/reference/pivot_longer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pivot data from wide to long — pivot_longer","text":"pivot_longer() updated approach gather(), designed simpler use handle use cases. recommend use pivot_longer() new code; gather() going away longer active development.","code":""},{"path":"/reference/pivot_longer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pivot data from wide to long — pivot_longer","text":"","code":"data(pbmc_small) pbmc_small |> pivot_longer(   cols=c(orig.ident, groups),   names_to=\"name\", values_to=\"value\") #> tidyseurat says: A data frame is returned for independent data analysis. #> # A tibble: 160 × 29 #>    .cell     nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents RNA_snn_res.1 #>    <chr>          <dbl>        <int> <fct>           <fct>         <fct>         #>  1 ATGCCAGA…         70           47 0               A             0             #>  2 ATGCCAGA…         70           47 0               A             0             #>  3 CATGGCCT…         85           52 0               A             0             #>  4 CATGGCCT…         85           52 0               A             0             #>  5 GAACCTGA…         87           50 1               B             0             #>  6 GAACCTGA…         87           50 1               B             0             #>  7 TGACTGGA…        127           56 0               A             0             #>  8 TGACTGGA…        127           56 0               A             0             #>  9 AGTCAGAC…        173           53 0               A             0             #> 10 AGTCAGAC…        173           53 0               A             0             #> # ℹ 150 more rows #> # ℹ 23 more variables: PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, PC_4 <dbl>, #> #   PC_5 <dbl>, PC_6 <dbl>, PC_7 <dbl>, PC_8 <dbl>, PC_9 <dbl>, PC_10 <dbl>, #> #   PC_11 <dbl>, PC_12 <dbl>, PC_13 <dbl>, PC_14 <dbl>, PC_15 <dbl>, #> #   PC_16 <dbl>, PC_17 <dbl>, PC_18 <dbl>, PC_19 <dbl>, tSNE_1 <dbl>, #> #   tSNE_2 <dbl>, name <chr>, value <chr>"},{"path":"/reference/plotly.html","id":null,"dir":"Reference","previous_headings":"","what":"Initiate a plotly visualization — plotly","title":"Initiate a plotly visualization — plotly","text":"function maps R objects plotly.js, (MIT licensed) web-based interactive charting library. provides abstractions common things (e.g. mapping data values fill colors (via color) creating animations (via frame)) sets different defaults make interface feel 'R-like' (.e., closer plot() ggplot2::qplot()).","code":""},{"path":"/reference/plotly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initiate a plotly visualization — plotly","text":"","code":"plot_ly(   data = data.frame(),   ...,   type = NULL,   name = NULL,   color = NULL,   colors = NULL,   alpha = NULL,   stroke = NULL,   strokes = NULL,   alpha_stroke = 1,   size = NULL,   sizes = c(10, 100),   span = NULL,   spans = c(1, 20),   symbol = NULL,   symbols = NULL,   linetype = NULL,   linetypes = NULL,   split = NULL,   frame = NULL,   width = NULL,   height = NULL,   source = \"A\" )  # S3 method for class 'tbl_df' plot_ly(   data = data.frame(),   ...,   type = NULL,   name = NULL,   color = NULL,   colors = NULL,   alpha = NULL,   stroke = NULL,   strokes = NULL,   alpha_stroke = 1,   size = NULL,   sizes = c(10, 100),   span = NULL,   spans = c(1, 20),   symbol = NULL,   symbols = NULL,   linetype = NULL,   linetypes = NULL,   split = NULL,   frame = NULL,   width = NULL,   height = NULL,   source = \"A\" )  # S3 method for class 'Seurat' plot_ly(   data = data.frame(),   ...,   type = NULL,   name = NULL,   color = NULL,   colors = NULL,   alpha = NULL,   stroke = NULL,   strokes = NULL,   alpha_stroke = 1,   size = NULL,   sizes = c(10, 100),   span = NULL,   spans = c(1, 20),   symbol = NULL,   symbols = NULL,   linetype = NULL,   linetypes = NULL,   split = NULL,   frame = NULL,   width = NULL,   height = NULL,   source = \"A\" )"},{"path":"/reference/plotly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initiate a plotly visualization — plotly","text":"data data frame (optional) crosstalk::SharedData object. ... Arguments (.e., attributes) passed along trace type. See schema() list acceptable attributes given trace type (going traces -> type -> attributes). Note attributes provided level may override arguments (e.g. plot_ly(x = 1:10, y = 1:10, color = (\"red\"), marker = list(color = \"blue\"))). type character string specifying trace type (e.g. \"scatter\", \"bar\", \"box\", etc). specified, always creates trace, otherwise name Values mapped trace's name attribute. Since trace can one name, argument acts much like split creates one trace every unique value. color Values mapped relevant 'fill-color' attribute(s) (e.g. fillcolor, marker.color, textfont.color, etc.). mapping data values color codes may controlled using colors alpha, avoided altogether via () (e.g., color = (\"red\")). color understood grDevices::col2rgb() may used way. colors Either colorbrewer2.org palette name (e.g. \"YlOrRd\" \"Blues\"), vector colors interpolate hexadecimal \"#RRGGBB\" format, color interpolation function like colorRamp(). alpha number 0 1 specifying alpha channel applied color. Defaults 0.5 mapping fillcolor 1 otherwise. stroke Similar color, values mapped relevant 'stroke-color' attribute(s) (e.g., marker.line.color line.color filled polygons). specified, stroke inherits color. strokes Similar colors, controls stroke mapping. alpha_stroke Similar alpha, applied stroke. size (Numeric) values mapped relevant 'fill-size' attribute(s) (e.g., marker.size, textfont.size, error_x.width). mapping data values symbols may controlled using sizes, avoided altogether via () (e.g., size = (30)). sizes numeric vector length 2 used scale size pixels. span (Numeric) values mapped relevant 'stroke-size' attribute(s) (e.g., marker.line.width, line.width filled polygons, error_x.thickness) mapping data values symbols may controlled using spans, avoided altogether via () (e.g., span = (30)). spans numeric vector length 2 used scale span pixels. symbol (Discrete) values mapped marker.symbol. mapping data values symbols may controlled using symbols, avoided altogether via () (e.g., symbol = (\"pentagon\")). pch value symbol name may used way. symbols character vector pch values symbol names. linetype (Discrete) values mapped line.dash. mapping data values symbols may controlled using linetypes, avoided altogether via () (e.g., linetype = (\"dash\")). lty (see par) value dash name may used way. linetypes character vector lty values dash names split (Discrete) values used create multiple traces (one trace per value). frame (Discrete) values used create animation frames. width Width pixels (optional, defaults automatic sizing). height Height pixels (optional, defaults automatic sizing). source character string length 1. Match value string source argument event_data() retrieve event data corresponding specific plot (shiny apps can multiple plots).","code":""},{"path":"/reference/plotly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initiate a plotly visualization — plotly","text":"`plotly`","code":""},{"path":"/reference/plotly.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initiate a plotly visualization — plotly","text":"Unless type specified, function just initiates plotly object 'global' attributes passed onto downstream uses add_trace() (similar). formula must always used referencing column name(s) data (e.g. plot_ly(mtcars, x = ~wt)). Formulas optional supplying values directly, help inform default axis/scale titles (e.g., plot_ly(x = mtcars$wt) vs plot_ly(x = ~mtcars$wt))","code":""},{"path":"/reference/plotly.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Initiate a plotly visualization — plotly","text":"https://plotly-r.com/overview.html","code":""},{"path":[]},{"path":"/reference/plotly.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Initiate a plotly visualization — plotly","text":"Carson Sievert","code":""},{"path":"/reference/plotly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initiate a plotly visualization — plotly","text":"","code":"data(pbmc_small) plot_ly(pbmc_small)  {\"x\":{\"visdat\":{\"177622c0af35\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"177622c0af35\",\"attrs\":{\"177622c0af35\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20]}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"xaxis\":{\"domain\":[0,1],\"automargin\":true},\"yaxis\":{\"domain\":[0,1],\"automargin\":true},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"line\":{\"color\":\"rgba(31,119,180,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}"},{"path":"/reference/pull.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a single column — pull","title":"Extract a single column — pull","text":"pull() similar $. mostly useful looks little nicer pipes, also works remote data frames, can optionally name output.","code":""},{"path":"/reference/pull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a single column — pull","text":"","code":"# S3 method for class 'Seurat' pull(.data, var = -1, name = NULL, ...)"},{"path":"/reference/pull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a single column — pull","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. var variable specified : literal variable name positive integer, giving position counting left negative integer, giving position counting right. default returns last column (assumption column created recently). argument taken expression supports quasiquotation (can unquote column names column locations). name optional parameter specifies column used names named vector. Specified similar manner var. ... use methods.","code":""},{"path":"/reference/pull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a single column — pull","text":"vector size .data.","code":""},{"path":"/reference/pull.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Extract a single column — pull","text":"function generic, means packages can provide implementations (methods) classes. See documentation individual methods extra arguments differences behaviour. following methods currently available loaded packages: dplyr (data.frame), tidyseurat (Seurat) .","code":""},{"path":"/reference/pull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a single column — pull","text":"","code":"data(pbmc_small) pbmc_small |> pull(groups) #> tidyseurat says: A data frame is returned for independent data analysis. #>  [1] \"g2\" \"g1\" \"g2\" \"g2\" \"g2\" \"g1\" \"g1\" \"g1\" \"g1\" \"g1\" \"g2\" \"g1\" \"g2\" \"g2\" \"g2\" #> [16] \"g1\" \"g2\" \"g1\" \"g1\" \"g2\" \"g1\" \"g1\" \"g2\" \"g2\" \"g1\" \"g2\" \"g2\" \"g2\" \"g2\" \"g1\" #> [31] \"g1\" \"g1\" \"g1\" \"g2\" \"g1\" \"g1\" \"g2\" \"g1\" \"g1\" \"g2\" \"g1\" \"g2\" \"g2\" \"g2\" \"g1\" #> [46] \"g2\" \"g1\" \"g2\" \"g1\" \"g2\" \"g1\" \"g2\" \"g2\" \"g2\" \"g1\" \"g1\" \"g1\" \"g1\" \"g2\" \"g1\" #> [61] \"g1\" \"g1\" \"g1\" \"g1\" \"g1\" \"g2\" \"g2\" \"g1\" \"g1\" \"g1\" \"g2\" \"g1\" \"g2\" \"g2\" \"g1\" #> [76] \"g1\" \"g2\" \"g1\" \"g2\" \"g1\""},{"path":"/reference/quo_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert array of quosure (e.g. c(col_a, col_b)) into character vector — quo_names","title":"Convert array of quosure (e.g. c(col_a, col_b)) into character vector — quo_names","text":"Convert array quosure (e.g. c(col_a, col_b)) character vector","code":""},{"path":"/reference/quo_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert array of quosure (e.g. c(col_a, col_b)) into character vector — quo_names","text":"","code":"quo_names(v)"},{"path":"/reference/quo_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert array of quosure (e.g. c(col_a, col_b)) into character vector — quo_names","text":"v array quosures (e.g. c(col_a, col_b))","code":""},{"path":"/reference/quo_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert array of quosure (e.g. c(col_a, col_b)) into character vector — quo_names","text":"character vector","code":""},{"path":"/reference/rename.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename columns — rename","title":"Rename columns — rename","text":"rename() changes names individual variables using new_name = old_name syntax; rename_with() renames columns using function.","code":""},{"path":"/reference/rename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename columns — rename","text":"","code":"# S3 method for class 'Seurat' rename(.data, ...)"},{"path":"/reference/rename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename columns — rename","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... rename(): <tidy-select> Use new_name = old_name rename selected variables. rename_with(): additional arguments passed onto .fn.","code":""},{"path":"/reference/rename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename columns — rename","text":"object type .data. output following properties: Rows affected. Column names changed; column order preserved. Data frame attributes preserved. Groups updated reflect new names.","code":""},{"path":"/reference/rename.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Rename columns — rename","text":"function generic, means packages can provide implementations (methods) classes. See documentation individual methods extra arguments differences behaviour. following methods currently available loaded packages: dplyr (data.frame), plotly (plotly), tidyseurat (Seurat) .","code":""},{"path":[]},{"path":"/reference/rename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename columns — rename","text":"","code":"data(pbmc_small) pbmc_small |> rename(s_score=nFeature_RNA) #> # A Seurat-tibble abstraction: 80 × 15 #> # Features=230 | Cells=80 | Active assay=RNA | Assays=RNA #>    .cell      orig.ident nCount_RNA s_score RNA_snn_res.0.8 letter.idents groups #>    <chr>      <fct>           <dbl>   <int> <fct>           <fct>         <chr>  #>  1 ATGCCAGAA… SeuratPro…         70      47 0               A             g2     #>  2 CATGGCCTG… SeuratPro…         85      52 0               A             g1     #>  3 GAACCTGAT… SeuratPro…         87      50 1               B             g2     #>  4 TGACTGGAT… SeuratPro…        127      56 0               A             g2     #>  5 AGTCAGACT… SeuratPro…        173      53 0               A             g2     #>  6 TCTGATACA… SeuratPro…         70      48 0               A             g1     #>  7 TGGTATCTA… SeuratPro…         64      36 0               A             g1     #>  8 GCAGCTCTG… SeuratPro…         72      45 0               A             g1     #>  9 GATATAACA… SeuratPro…         52      36 0               A             g1     #> 10 AATGTTGAC… SeuratPro…        100      41 0               A             g1     #> # ℹ 70 more rows #> # ℹ 8 more variables: RNA_snn_res.1 <fct>, PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, #> #   PC_4 <dbl>, PC_5 <dbl>, tSNE_1 <dbl>, tSNE_2 <dbl>"},{"path":"/reference/return_arguments_of.html","id":null,"dir":"Reference","previous_headings":"","what":"returns variables from an expression — return_arguments_of","title":"returns variables from an expression — return_arguments_of","text":"returns variables expression","code":""},{"path":"/reference/return_arguments_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"returns variables from an expression — return_arguments_of","text":"","code":"return_arguments_of(expression)"},{"path":"/reference/return_arguments_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"returns variables from an expression — return_arguments_of","text":"expression expression","code":""},{"path":"/reference/return_arguments_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"returns variables from an expression — return_arguments_of","text":"list symbols","code":""},{"path":"/reference/right_join.html","id":null,"dir":"Reference","previous_headings":"","what":"Mutating joins — right_join","title":"Mutating joins — right_join","text":"Mutating joins add columns y x, matching observations based keys. four mutating joins: inner join, three outer joins.","code":""},{"path":"/reference/right_join.html","id":"inner-join","dir":"Reference","previous_headings":"","what":"Inner join","title":"Mutating joins — right_join","text":"inner_join() keeps observations x matching key y. important property inner join unmatched rows either input included result. means generally inner joins appropriate analyses, easy lose observations.","code":""},{"path":"/reference/right_join.html","id":"outer-joins","dir":"Reference","previous_headings":"","what":"Outer joins","title":"Mutating joins — right_join","text":"three outer joins keep observations appear least one data frames: left_join() keeps observations x. right_join() keeps observations y. full_join() keeps observations x y.","code":""},{"path":"/reference/right_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mutating joins — right_join","text":"","code":"# S3 method for class 'Seurat' right_join(x, y, by = NULL, copy = FALSE, suffix = c(\".x\", \".y\"), ...)"},{"path":"/reference/right_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mutating joins — right_join","text":"x, y pair data frames, data frame extensions (e.g. tibble), lazy data frames (e.g. dbplyr dtplyr). See Methods, , details. join specification created join_by(), character vector variables join . NULL, default, *_join() perform natural join, using variables common across x y. message lists variables can check correct; suppress message supplying explicitly. join different variables x y, use join_by() specification. example, join_by(== b) match x$y$b. join multiple variables, use join_by() specification multiple expressions. example, join_by(== b, c == d) match x$y$b x$c y$d. column names x y, can shorten listing variable names, like join_by(, c). join_by() can also used perform inequality, rolling, overlap joins. See documentation ?join_by details types joins. simple equality joins, can alternatively specify character vector variable names join . example, = c(\"\", \"b\") joins x$y$x$b y$b. variable names differ x y, use named character vector like = c(\"x_a\" = \"y_a\", \"x_b\" = \"y_b\"). perform cross-join, generating combinations x y, see cross_join(). copy x y data source, copy TRUE, y copied src x.  allows join tables across srcs, potentially expensive operation must opt . suffix non-joined duplicate variables x y, suffixes added output disambiguate . character vector length 2. ... parameters passed onto methods.","code":""},{"path":"/reference/right_join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mutating joins — right_join","text":"object type x (including groups). order rows columns x preserved much possible. output following properties: rows affect join type. inner_join() returns matched x rows. left_join() returns x rows. right_join()  returns matched x rows, followed unmatched y rows. full_join()  returns x rows, followed unmatched y rows. Output columns include columns x non-key columns y. keep = TRUE, key columns y included well. non-key columns x y name, suffixes added disambiguate. keep = TRUE key columns x y name, suffixes added disambiguate well. keep = FALSE, output columns included coerced common type x y.","code":""},{"path":"/reference/right_join.html","id":"many-to-many-relationships","dir":"Reference","previous_headings":"","what":"Many-to-many relationships","title":"Mutating joins — right_join","text":"default, dplyr guards many--many relationships equality joins throwing warning. occur following true: row x matches multiple rows y. row y matches multiple rows x. typically surprising, joins involve relationship one--one, one--many, many--one, often result improperly specified join. Many--many relationships particularly problematic can result Cartesian explosion number rows returned join. many--many relationship expected, silence warning explicitly setting relationship = \"many--many\". production code, best preemptively set relationship whatever relationship expect exist keys x y, forces error occur immediately data align expectations. Inequality joins typically result many--many relationships nature, warn default, still take extra care specifying inequality join, also capability return large number rows. Rolling joins warn many--many relationships either, many rolling joins follow many--one relationship, often useful set relationship = \"many--one\" enforce . Note SQL, database providers let specify many--many relationship two tables, instead requiring create third junction table results two one--many relationships instead.","code":""},{"path":"/reference/right_join.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Mutating joins — right_join","text":"functions generics, means packages can provide implementations (methods) classes. See documentation individual methods extra arguments differences behaviour. Methods available currently loaded packages: inner_join(): dplyr (data.frame), tidyseurat (Seurat) . left_join(): dplyr (data.frame), tidyseurat (Seurat) . right_join(): dplyr (data.frame), tidyseurat (Seurat) . full_join(): dplyr (data.frame), tidyseurat (Seurat) .","code":""},{"path":[]},{"path":"/reference/right_join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mutating joins — right_join","text":"","code":"data(pbmc_small) tt <- pbmc_small tt |> right_join(tt |>    distinct(groups) |>    mutate(new_column=1:2) |>    slice(1)) #> tidyseurat says: A data frame is returned for independent data analysis. #> Joining with `by = join_by(groups)` #> # A Seurat-tibble abstraction: 36 × 16 #> # Features=230 | Cells=36 | Active assay=RNA | Assays=RNA #>    .cell orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups #>    <chr> <fct>           <dbl>        <int> <fct>           <fct>         <chr>  #>  1 ATGC… SeuratPro…         70           47 0               A             g2     #>  2 GAAC… SeuratPro…         87           50 1               B             g2     #>  3 TGAC… SeuratPro…        127           56 0               A             g2     #>  4 AGTC… SeuratPro…        173           53 0               A             g2     #>  5 AGGT… SeuratPro…         62           31 0               A             g2     #>  6 GGGT… SeuratPro…        101           41 0               A             g2     #>  7 CATG… SeuratPro…         51           26 0               A             g2     #>  8 TACG… SeuratPro…         99           45 0               A             g2     #>  9 GTAA… SeuratPro…         67           33 0               A             g2     #> 10 TACA… SeuratPro…        109           41 0               A             g2     #> # ℹ 26 more rows #> # ℹ 9 more variables: RNA_snn_res.1 <fct>, new_column <int>, PC_1 <dbl>, #> #   PC_2 <dbl>, PC_3 <dbl>, PC_4 <dbl>, PC_5 <dbl>, tSNE_1 <dbl>, tSNE_2 <dbl>"},{"path":"/reference/rowwise.html","id":null,"dir":"Reference","previous_headings":"","what":"Group input by rows — rowwise","title":"Group input by rows — rowwise","text":"rowwise() allows compute data frame row---time. useful vectorised function exist. dplyr verbs preserve row-wise grouping. exception summarise(), return grouped_df. can explicitly ungroup ungroup() as_tibble(), convert grouped_df group_by().","code":""},{"path":"/reference/rowwise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group input by rows — rowwise","text":"","code":"# S3 method for class 'Seurat' rowwise(data, ...)"},{"path":"/reference/rowwise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group input by rows — rowwise","text":"data Input data frame. ... <tidy-select> Variables preserved calling summarise(). typically set variables whose combination uniquely identify row. NB: unlike group_by() can create new variables instead can select multiple variables (e.g.) everything().","code":""},{"path":"/reference/rowwise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group input by rows — rowwise","text":"row-wise data frame class rowwise_df. Note rowwise_df implicitly grouped row, grouped_df.","code":""},{"path":"/reference/rowwise.html","id":"list-columns","dir":"Reference","previous_headings":"","what":"List-columns","title":"Group input by rows — rowwise","text":"rowwise exactly one row per group offers small convenience working list-columns. Normally, summarise() mutate() extract groups worth data [. index list way, get back another list. working rowwise tibble, dplyr use [[ instead [ make life little easier.","code":""},{"path":[]},{"path":"/reference/rowwise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group input by rows — rowwise","text":"","code":"# TODO"},{"path":"/reference/sample_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample n rows from a table — sample_n","title":"Sample n rows from a table — sample_n","text":"sample_n() sample_frac() superseded favour slice_sample(). deprecated near future, retirement means perform critical bug fixes, recommend moving newer alternative. functions superseded realised convenient two mutually exclusive arguments one function, rather two separate functions. also made clean smaller design issues sample_n()/sample_frac: connection slice() obvious. name first argument, tbl, inconsistent single table verbs use .data. size argument uses tidy evaluation, surprising undocumented. easier remove deprecated .env argument. ... suboptimal position.","code":""},{"path":"/reference/sample_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample n rows from a table — sample_n","text":"","code":"# S3 method for class 'Seurat' sample_n(tbl, size, replace = FALSE, weight = NULL, .env = NULL, ...)  # S3 method for class 'Seurat' sample_frac(tbl, size = 1, replace = FALSE, weight = NULL, .env = NULL, ...)"},{"path":"/reference/sample_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample n rows from a table — sample_n","text":"tbl data.frame. size <tidy-select> sample_n(), number rows select. sample_frac(), fraction rows select. tbl grouped, size applies group. replace Sample without replacement? weight <tidy-select> Sampling weights. must evaluate vector non-negative numbers length input. Weights automatically standardised sum 1. .env DEPRECATED. ... ignored","code":""},{"path":"/reference/sample_n.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample n rows from a table — sample_n","text":"","code":"data(pbmc_small) pbmc_small |> sample_n(50) #> # A Seurat-tibble abstraction: 50 × 15 #> # Features=230 | Cells=50 | Active assay=RNA | Assays=RNA #>    .cell orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups #>    <chr> <fct>           <dbl>        <int> <fct>           <fct>         <chr>  #>  1 AGAT… SeuratPro…        187           61 0               A             g2     #>  2 TACA… SeuratPro…        108           44 0               A             g2     #>  3 CATG… SeuratPro…         51           26 0               A             g2     #>  4 GCAC… SeuratPro…        292           71 1               B             g2     #>  5 CGTA… SeuratPro…        371           75 1               B             g1     #>  6 TTAC… SeuratPro…        298           65 1               B             g1     #>  7 ATAA… SeuratPro…         99           42 1               B             g2     #>  8 TGGT… SeuratPro…         64           36 0               A             g1     #>  9 GTTG… SeuratPro…        221           67 0               A             g2     #> 10 GGCA… SeuratPro…        172           29 0               A             g1     #> # ℹ 40 more rows #> # ℹ 8 more variables: RNA_snn_res.1 <fct>, PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, #> #   PC_4 <dbl>, PC_5 <dbl>, tSNE_1 <dbl>, tSNE_2 <dbl> pbmc_small |> sample_frac(0.1) #> # A Seurat-tibble abstraction: 8 × 15 #> # Features=230 | Cells=8 | Active assay=RNA | Assays=RNA #>   .cell  orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups #>   <chr>  <fct>           <dbl>        <int> <fct>           <fct>         <chr>  #> 1 GATAG… SeuratPro…        328           72 1               B             g1     #> 2 GGCAT… SeuratPro…        126           53 0               A             g1     #> 3 ATGCC… SeuratPro…         70           47 0               A             g2     #> 4 AGATA… SeuratPro…        187           61 0               A             g2     #> 5 TACAA… SeuratPro…        108           44 0               A             g2     #> 6 CATGA… SeuratPro…         51           26 0               A             g2     #> 7 GCACT… SeuratPro…        292           71 1               B             g2     #> 8 CGTAG… SeuratPro…        371           75 1               B             g1     #> # ℹ 8 more variables: RNA_snn_res.1 <fct>, PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, #> #   PC_4 <dbl>, PC_5 <dbl>, tSNE_1 <dbl>, tSNE_2 <dbl>"},{"path":"/reference/select.html","id":null,"dir":"Reference","previous_headings":"","what":"Keep or drop columns using their names and types — select","title":"Keep or drop columns using their names and types — select","text":"Select (optionally rename) variables data frame, using concise mini-language makes easy refer variables based name (e.g. :f selects columns left f right) type (e.g. (.numeric) selects numeric columns).","code":""},{"path":"/reference/select.html","id":"overview-of-selection-features","dir":"Reference","previous_headings":"","what":"Overview of selection features","title":"Keep or drop columns using their names and types — select","text":"Tidyverse selections implement dialect R operators make easy select variables: : selecting range consecutive variables. ! taking complement set variables. & | selecting intersection union two sets variables. c() combining selections. addition, can use selection helpers. helpers select specific columns: everything(): Matches variables. last_col(): Select last variable, possibly offset. group_cols(): Select grouping columns. helpers select variables matching patterns names: starts_with(): Starts prefix. ends_with(): Ends suffix. contains(): Contains literal string. matches(): Matches regular expression. num_range(): Matches numerical range like x01, x02, x03. variables stored character vector: all_of(): Matches variable names character vector. names must present, otherwise --bounds error thrown. any_of(): all_of(), except error thrown names exist. using predicate function: (): Applies function variables selects function returns TRUE.","code":""},{"path":"/reference/select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep or drop columns using their names and types — select","text":"","code":"# S3 method for class 'Seurat' select(.data, ...)"},{"path":"/reference/select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep or drop columns using their names and types — select","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... <tidy-select> One unquoted expressions separated commas. Variable names can used positions data frame, expressions like x:y can used select range variables.","code":""},{"path":"/reference/select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Keep or drop columns using their names and types — select","text":"object type .data. output following properties: Rows affected. Output columns subset input columns, potentially different order. Columns renamed new_name = old_name form used. Data frame attributes preserved. Groups maintained; select grouping variables.","code":""},{"path":"/reference/select.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Keep or drop columns using their names and types — select","text":"function generic, means packages can provide implementations (methods) classes. See documentation individual methods extra arguments differences behaviour. following methods currently available loaded packages: dplyr (data.frame), plotly (plotly), sp (spatial), tidyseurat (Seurat) .","code":""},{"path":"/reference/select.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Keep or drop columns using their names and types — select","text":"show usage basic selection operators. See specific help pages learn helpers like starts_with(). selection language can used functions like dplyr::select() tidyr::pivot_longer(). first attach tidyverse:   Select variables name:   Select multiple variables separating commas. Note order columns determined order inputs:   Functions like tidyr::pivot_longer() take variables dots. case use c() select multiple variables:","code":"library(tidyverse)  # For better printing iris <- as_tibble(iris) starwars %>% select(height) #> # A tibble: 87 x 1 #>   height #>    <int> #> 1    172 #> 2    167 #> 3     96 #> 4    202 #> # i 83 more rows  iris %>% pivot_longer(Sepal.Length) #> # A tibble: 150 x 6 #>   Sepal.Width Petal.Length Petal.Width Species name         value #>         <dbl>        <dbl>       <dbl> <fct>   <chr>        <dbl> #> 1         3.5          1.4         0.2 setosa  Sepal.Length   5.1 #> 2         3            1.4         0.2 setosa  Sepal.Length   4.9 #> 3         3.2          1.3         0.2 setosa  Sepal.Length   4.7 #> 4         3.1          1.5         0.2 setosa  Sepal.Length   4.6 #> # i 146 more rows starwars %>% select(homeworld, height, mass) #> # A tibble: 87 x 3 #>   homeworld height  mass #>   <chr>      <int> <dbl> #> 1 Tatooine     172    77 #> 2 Tatooine     167    75 #> 3 Naboo         96    32 #> 4 Tatooine     202   136 #> # i 83 more rows iris %>% pivot_longer(c(Sepal.Length, Petal.Length)) #> # A tibble: 300 x 5 #>   Sepal.Width Petal.Width Species name         value #>         <dbl>       <dbl> <fct>   <chr>        <dbl> #> 1         3.5         0.2 setosa  Sepal.Length   5.1 #> 2         3.5         0.2 setosa  Petal.Length   1.4 #> 3         3           0.2 setosa  Sepal.Length   4.9 #> 4         3           0.2 setosa  Petal.Length   1.4 #> # i 296 more rows"},{"path":"/reference/select.html","id":"operators-","dir":"Reference","previous_headings":"","what":"Operators:","title":"Keep or drop columns using their names and types — select","text":": operator selects range consecutive variables:   ! operator negates selection:   & | take intersection union two selections:   take difference two selections, combine & ! operators:","code":"starwars %>% select(name:mass) #> # A tibble: 87 x 3 #>   name           height  mass #>   <chr>           <int> <dbl> #> 1 Luke Skywalker    172    77 #> 2 C-3PO             167    75 #> 3 R2-D2              96    32 #> 4 Darth Vader       202   136 #> # i 83 more rows starwars %>% select(!(name:mass)) #> # A tibble: 87 x 11 #>   hair_color skin_color  eye_color birth_year sex   gender    homeworld species #>   <chr>      <chr>       <chr>          <dbl> <chr> <chr>     <chr>     <chr> #> 1 blond      fair        blue            19   male  masculine Tatooine  Human #> 2 <NA>       gold        yellow         112   none  masculine Tatooine  Droid #> 3 <NA>       white, blue red             33   none  masculine Naboo     Droid #> 4 none       white       yellow          41.9 male  masculine Tatooine  Human #> # i 83 more rows #> # i 3 more variables: films <list>, vehicles <list>, starships <list>  iris %>% select(!c(Sepal.Length, Petal.Length)) #> # A tibble: 150 x 3 #>   Sepal.Width Petal.Width Species #>         <dbl>       <dbl> <fct> #> 1         3.5         0.2 setosa #> 2         3           0.2 setosa #> 3         3.2         0.2 setosa #> 4         3.1         0.2 setosa #> # i 146 more rows  iris %>% select(!ends_with(\"Width\")) #> # A tibble: 150 x 3 #>   Sepal.Length Petal.Length Species #>          <dbl>        <dbl> <fct> #> 1          5.1          1.4 setosa #> 2          4.9          1.4 setosa #> 3          4.7          1.3 setosa #> 4          4.6          1.5 setosa #> # i 146 more rows iris %>% select(starts_with(\"Petal\") & ends_with(\"Width\")) #> # A tibble: 150 x 1 #>   Petal.Width #>         <dbl> #> 1         0.2 #> 2         0.2 #> 3         0.2 #> 4         0.2 #> # i 146 more rows  iris %>% select(starts_with(\"Petal\") | ends_with(\"Width\")) #> # A tibble: 150 x 3 #>   Petal.Length Petal.Width Sepal.Width #>          <dbl>       <dbl>       <dbl> #> 1          1.4         0.2         3.5 #> 2          1.4         0.2         3 #> 3          1.3         0.2         3.2 #> 4          1.5         0.2         3.1 #> # i 146 more rows iris %>% select(starts_with(\"Petal\") & !ends_with(\"Width\")) #> # A tibble: 150 x 1 #>   Petal.Length #>          <dbl> #> 1          1.4 #> 2          1.4 #> 3          1.3 #> 4          1.5 #> # i 146 more rows"},{"path":[]},{"path":"/reference/select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Keep or drop columns using their names and types — select","text":"","code":"data(pbmc_small) pbmc_small |> select(cell, orig.ident) #> Warning: tidyseurat says: from version 1.3.1, the special columns including cell id (colnames(se)) has changed to \".cell\". This dataset is returned with the old-style vocabulary (cell), however, we suggest to update your workflow to reflect the new vocabulary (.cell). #> # A Seurat-tibble abstraction: 80 × 9 #> # Features=230 | Cells=80 | Active assay=RNA | Assays=RNA #>    cell           orig.ident     PC_1   PC_2   PC_3  PC_4   PC_5  tSNE_1  tSNE_2 #>    <chr>          <fct>         <dbl>  <dbl>  <dbl> <dbl>  <dbl>   <dbl>   <dbl> #>  1 ATGCCAGAACGACT SeuratProj… -0.774  -0.900 -0.249 0.559  0.465   0.868  -8.10  #>  2 CATGGCCTGTGCAT SeuratProj… -0.0260 -0.347  0.665 0.418  0.585  -7.39   -8.77  #>  3 GAACCTGATGAACC SeuratProj… -0.457   0.180  1.32  2.01  -0.482 -28.2     0.241 #>  4 TGACTGGATTCTCA SeuratProj… -0.812  -1.38  -1.00  0.139 -1.60   16.3   -11.2   #>  5 AGTCAGACTGCACA SeuratProj… -0.774  -0.900 -0.249 0.559  0.465   1.91  -11.2   #>  6 TCTGATACACGTGT SeuratProj… -0.774  -0.900 -0.249 0.559  0.465   3.15   -9.94  #>  7 TGGTATCTAAACAG SeuratProj… -0.460  -1.19  -0.312 0.716 -1.65   17.9    -9.90  #>  8 GCAGCTCTGTTTCT SeuratProj… -0.900  -0.388  0.693 0.404  0.536  -6.49   -8.39  #>  9 GATATAACACGCAT SeuratProj… -0.774  -0.900 -0.249 0.559  0.465   1.33   -9.68  #> 10 AATGTTGACAGTCA SeuratProj… -0.488  -1.16  -0.306 0.702 -1.47   17.0    -9.43  #> # ℹ 70 more rows"},{"path":"/reference/separate.html","id":null,"dir":"Reference","previous_headings":"","what":"Separate a character column into multiple columns with a regular expression or numeric locations — separate","title":"Separate a character column into multiple columns with a regular expression or numeric locations — separate","text":"separate() superseded favour separate_wider_position() separate_wider_delim() two functions make two uses obvious, API polished, handling problems better. Superseded functions go away, receive critical bug fixes. Given either regular expression vector character positions, separate() turns single character column multiple columns.","code":""},{"path":"/reference/separate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Separate a character column into multiple columns with a regular expression or numeric locations — separate","text":"","code":"# S3 method for class 'Seurat' separate(   data,   col,   into,   sep = \"[^[:alnum:]]+\",   remove = TRUE,   convert = FALSE,   extra = \"warn\",   fill = \"warn\",   ... )"},{"path":"/reference/separate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Separate a character column into multiple columns with a regular expression or numeric locations — separate","text":"data data frame. col <tidy-select> Column expand. Names new variables create character vector. Use NA omit variable output. sep Separator columns. character, sep interpreted regular expression. default value regular expression matches sequence non-alphanumeric values. numeric, sep interpreted character positions split . Positive values start 1 far-left string; negative value start -1 far-right string. length sep one less . remove TRUE, remove input column output data frame. convert TRUE, run type.convert() .= TRUE new columns. useful component columns integer, numeric logical. NB: cause string \"NA\"s converted NAs. extra sep character vector, controls happens many pieces. three valid options: \"warn\" (default): emit warning drop extra values. \"drop\": drop extra values without warning. \"merge\": splits length() times fill sep character vector, controls happens enough pieces. three valid options: \"warn\" (default): emit warning fill right \"right\": fill missing values right \"left\": fill missing values left ... Additional arguments passed methods.","code":""},{"path":"/reference/separate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Separate a character column into multiple columns with a regular expression or numeric locations — separate","text":"`tidyseurat`","code":""},{"path":[]},{"path":"/reference/separate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Separate a character column into multiple columns with a regular expression or numeric locations — separate","text":"","code":"data(pbmc_small) un <- pbmc_small |> unite(\"new_col\", c(orig.ident, groups)) un |> separate(new_col, c(\"orig.ident\", \"groups\")) #> # A Seurat-tibble abstraction: 80 × 15 #> # Features=230 | Cells=80 | Active assay=RNA | Assays=RNA #>    .cell orig.ident groups nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents #>    <chr> <chr>      <chr>       <dbl>        <int> <fct>           <fct>         #>  1 ATGC… SeuratPro… g2             70           47 0               A             #>  2 CATG… SeuratPro… g1             85           52 0               A             #>  3 GAAC… SeuratPro… g2             87           50 1               B             #>  4 TGAC… SeuratPro… g2            127           56 0               A             #>  5 AGTC… SeuratPro… g2            173           53 0               A             #>  6 TCTG… SeuratPro… g1             70           48 0               A             #>  7 TGGT… SeuratPro… g1             64           36 0               A             #>  8 GCAG… SeuratPro… g1             72           45 0               A             #>  9 GATA… SeuratPro… g1             52           36 0               A             #> 10 AATG… SeuratPro… g1            100           41 0               A             #> # ℹ 70 more rows #> # ℹ 8 more variables: RNA_snn_res.1 <fct>, PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, #> #   PC_4 <dbl>, PC_5 <dbl>, tSNE_1 <dbl>, tSNE_2 <dbl>"},{"path":"/reference/slice.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset rows using their positions — slice","title":"Subset rows using their positions — slice","text":"slice() lets index rows (integer) locations. allows select, remove, duplicate rows. accompanied number helpers common use cases: slice_head() slice_tail() select first last rows. slice_sample() randomly selects rows. slice_min() slice_max() select rows smallest largest values variable. .data grouped_df, operation performed group, (e.g.) slice_head(df, n = 5) select first five rows group.","code":""},{"path":"/reference/slice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset rows using their positions — slice","text":"","code":"# S3 method for class 'Seurat' slice(.data, ..., .by = NULL, .preserve = FALSE)  # S3 method for class 'Seurat' slice_sample(   .data,   ...,   n = NULL,   prop = NULL,   by = NULL,   weight_by = NULL,   replace = FALSE )  # S3 method for class 'Seurat' slice_head(.data, ..., n, prop, by = NULL)  # S3 method for class 'Seurat' slice_tail(.data, ..., n, prop, by = NULL)  # S3 method for class 'Seurat' slice_min(   .data,   order_by,   ...,   n,   prop,   by = NULL,   with_ties = TRUE,   na_rm = FALSE )  # S3 method for class 'Seurat' slice_max(   .data,   order_by,   ...,   n,   prop,   by = NULL,   with_ties = TRUE,   na_rm = FALSE )"},{"path":"/reference/slice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset rows using their positions — slice","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... slice(): <data-masking> Integer row values. Provide either positive values keep, negative values drop. values provided must either positive negative. Indices beyond number rows input silently ignored. slice_*(), arguments passed methods. .,  <tidy-select> Optionally, selection columns group just operation, functioning alternative group_by(). details examples, see ?dplyr_by. .preserve Relevant .data input grouped. .preserve = FALSE (default), grouping structure recalculated based resulting data, otherwise grouping kept . n, prop Provide either n, number rows, prop, proportion rows select. neither supplied, n = 1 used. n greater number rows group (prop > 1), result silently truncated group size. prop rounded towards zero generate integer number rows. negative value n prop subtracted group size. example, n = -2 group 5 rows select 5 - 2 = 3 rows; prop = -0.25 8 rows select 8 * (1 - 0.25) = 6 rows. weight_by <data-masking> Sampling weights. must evaluate vector non-negative numbers length input. Weights automatically standardised sum 1. replace sampling performed (TRUE) without (FALSE, default) replacement. order_by <data-masking> Variable function variables order . order multiple variables, wrap data frame tibble. with_ties ties kept together? default, TRUE, may return rows request. Use FALSE ignore ties, return first n rows. na_rm missing values order_by removed result? FALSE, NA values sorted end (like arrange()), included insufficient non-missing values reach n/prop.","code":""},{"path":"/reference/slice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset rows using their positions — slice","text":"object type .data. output following properties: row may appear 0, 1, many times output. Columns modified. Groups modified. Data frame attributes preserved.","code":""},{"path":"/reference/slice.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Subset rows using their positions — slice","text":"Slice work relational databases intrinsic notion row order. want perform equivalent operation, use filter() row_number().","code":""},{"path":"/reference/slice.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Subset rows using their positions — slice","text":"function generics, means packages can provide implementations (methods) classes. See documentation individual methods extra arguments differences behaviour. Methods available currently loaded packages: slice(): dplyr (data.frame), plotly (plotly), tidyseurat (Seurat) . slice_head(): dplyr (data.frame), tidyseurat (Seurat) . slice_tail(): dplyr (data.frame), tidyseurat (Seurat) . slice_min(): dplyr (data.frame), tidyseurat (Seurat) . slice_max(): dplyr (data.frame), tidyseurat (Seurat) . slice_sample(): dplyr (data.frame), tidyseurat (Seurat) . function generics, means packages can provide implementations (methods) classes. See documentation individual methods extra arguments differences behaviour. Methods available currently loaded packages: slice(): dplyr (data.frame), plotly (plotly), tidyseurat (Seurat) . slice_head(): dplyr (data.frame), tidyseurat (Seurat) . slice_tail(): dplyr (data.frame), tidyseurat (Seurat) . slice_min(): dplyr (data.frame), tidyseurat (Seurat) . slice_max(): dplyr (data.frame), tidyseurat (Seurat) . slice_sample(): dplyr (data.frame), tidyseurat (Seurat) . function generics, means packages can provide implementations (methods) classes. See documentation individual methods extra arguments differences behaviour. Methods available currently loaded packages: slice(): dplyr (data.frame), plotly (plotly), tidyseurat (Seurat) . slice_head(): dplyr (data.frame), tidyseurat (Seurat) . slice_tail(): dplyr (data.frame), tidyseurat (Seurat) . slice_min(): dplyr (data.frame), tidyseurat (Seurat) . slice_max(): dplyr (data.frame), tidyseurat (Seurat) . slice_sample(): dplyr (data.frame), tidyseurat (Seurat) . function generics, means packages can provide implementations (methods) classes. See documentation individual methods extra arguments differences behaviour. Methods available currently loaded packages: slice(): dplyr (data.frame), plotly (plotly), tidyseurat (Seurat) . slice_head(): dplyr (data.frame), tidyseurat (Seurat) . slice_tail(): dplyr (data.frame), tidyseurat (Seurat) . slice_min(): dplyr (data.frame), tidyseurat (Seurat) . slice_max(): dplyr (data.frame), tidyseurat (Seurat) . slice_sample(): dplyr (data.frame), tidyseurat (Seurat) . function generics, means packages can provide implementations (methods) classes. See documentation individual methods extra arguments differences behaviour. Methods available currently loaded packages: slice(): dplyr (data.frame), plotly (plotly), tidyseurat (Seurat) . slice_head(): dplyr (data.frame), tidyseurat (Seurat) . slice_tail(): dplyr (data.frame), tidyseurat (Seurat) . slice_min(): dplyr (data.frame), tidyseurat (Seurat) . slice_max(): dplyr (data.frame), tidyseurat (Seurat) . slice_sample(): dplyr (data.frame), tidyseurat (Seurat) . function generics, means packages can provide implementations (methods) classes. See documentation individual methods extra arguments differences behaviour. Methods available currently loaded packages: slice(): dplyr (data.frame), plotly (plotly), tidyseurat (Seurat) . slice_head(): dplyr (data.frame), tidyseurat (Seurat) . slice_tail(): dplyr (data.frame), tidyseurat (Seurat) . slice_min(): dplyr (data.frame), tidyseurat (Seurat) . slice_max(): dplyr (data.frame), tidyseurat (Seurat) . slice_sample(): dplyr (data.frame), tidyseurat (Seurat) .","code":""},{"path":[]},{"path":"/reference/slice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset rows using their positions — slice","text":"","code":"data(pbmc_small) pbmc_small |> slice(1) #> # A Seurat-tibble abstraction: 1 × 15 #> # Features=230 | Cells=1 | Active assay=RNA | Assays=RNA #>   .cell  orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups #>   <chr>  <fct>           <dbl>        <int> <fct>           <fct>         <chr>  #> 1 ATGCC… SeuratPro…         70           47 0               A             g2     #> # ℹ 8 more variables: RNA_snn_res.1 <fct>, PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, #> #   PC_4 <dbl>, PC_5 <dbl>, tSNE_1 <dbl>, tSNE_2 <dbl>  # Slice group-wise using .by pbmc_small |> slice(1:2, .by=groups) #> # A Seurat-tibble abstraction: 4 × 15 #> # Features=230 | Cells=4 | Active assay=RNA | Assays=RNA #>   .cell  orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups #>   <chr>  <fct>           <dbl>        <int> <fct>           <fct>         <chr>  #> 1 ATGCC… SeuratPro…         70           47 0               A             g2     #> 2 CATGG… SeuratPro…         85           52 0               A             g1     #> 3 GAACC… SeuratPro…         87           50 1               B             g2     #> 4 TCTGA… SeuratPro…         70           48 0               A             g1     #> # ℹ 8 more variables: RNA_snn_res.1 <fct>, PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, #> #   PC_4 <dbl>, PC_5 <dbl>, tSNE_1 <dbl>, tSNE_2 <dbl>   # slice_sample() allows you to random select with or without replacement pbmc_small |> slice_sample(n=5) #> # A Seurat-tibble abstraction: 5 × 15 #> # Features=230 | Cells=5 | Active assay=RNA | Assays=RNA #>   .cell  orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups #>   <chr>  <fct>           <dbl>        <int> <fct>           <fct>         <chr>  #> 1 ATGCC… SeuratPro…         70           47 0               A             g2     #> 2 AGATA… SeuratPro…        187           61 0               A             g2     #> 3 GGCAT… SeuratPro…        126           53 0               A             g1     #> 4 TACAA… SeuratPro…        108           44 0               A             g2     #> 5 GATAG… SeuratPro…        328           72 1               B             g1     #> # ℹ 8 more variables: RNA_snn_res.1 <fct>, PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, #> #   PC_4 <dbl>, PC_5 <dbl>, tSNE_1 <dbl>, tSNE_2 <dbl>  # if using replacement, and duplicate cells are returned, a tibble will be # returned because duplicate cells cannot exist in Seurat objects pbmc_small |> slice_sample(n=1, replace=TRUE) # returns Seurat #> # A Seurat-tibble abstraction: 1 × 15 #> # Features=230 | Cells=1 | Active assay=RNA | Assays=RNA #>   .cell  orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups #>   <chr>  <fct>           <dbl>        <int> <fct>           <fct>         <chr>  #> 1 GATAG… SeuratPro…        328           72 1               B             g1     #> # ℹ 8 more variables: RNA_snn_res.1 <fct>, PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, #> #   PC_4 <dbl>, PC_5 <dbl>, tSNE_1 <dbl>, tSNE_2 <dbl> pbmc_small |> slice_sample(n=100, replace=TRUE) # returns tibble #> tidyseurat says: When sampling with replacement a data frame is returned for independent data analysis. #> # A tibble: 100 × 29 #>    .cell orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups #>    <chr> <fct>           <dbl>        <int> <fct>           <fct>         <chr>  #>  1 ATGC… SeuratPro…         70           47 0               A             g2     #>  2 ATGC… SeuratPro…         70           47 0               A             g2     #>  3 ATGC… SeuratPro…         70           47 0               A             g2     #>  4 CATG… SeuratPro…         85           52 0               A             g1     #>  5 TCTG… SeuratPro…         70           48 0               A             g1     #>  6 TGGT… SeuratPro…         64           36 0               A             g1     #>  7 AATG… SeuratPro…        100           41 0               A             g1     #>  8 GGGT… SeuratPro…        101           41 0               A             g2     #>  9 GGGT… SeuratPro…        101           41 0               A             g2     #> 10 CATG… SeuratPro…         51           26 0               A             g2     #> # ℹ 90 more rows #> # ℹ 22 more variables: RNA_snn_res.1 <fct>, PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, #> #   PC_4 <dbl>, PC_5 <dbl>, PC_6 <dbl>, PC_7 <dbl>, PC_8 <dbl>, PC_9 <dbl>, #> #   PC_10 <dbl>, PC_11 <dbl>, PC_12 <dbl>, PC_13 <dbl>, PC_14 <dbl>, #> #   PC_15 <dbl>, PC_16 <dbl>, PC_17 <dbl>, PC_18 <dbl>, PC_19 <dbl>, #> #   tSNE_1 <dbl>, tSNE_2 <dbl>  # weight by a variable pbmc_small |> slice_sample(n=5, weight_by=nCount_RNA) #> # A Seurat-tibble abstraction: 5 × 15 #> # Features=230 | Cells=5 | Active assay=RNA | Assays=RNA #>   .cell  orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups #>   <chr>  <fct>           <dbl>        <int> <fct>           <fct>         <chr>  #> 1 ACTCG… SeuratPro…        231           49 1               B             g2     #> 2 GGCAT… SeuratPro…        126           53 0               A             g1     #> 3 CTGCC… SeuratPro…        146           47 0               A             g1     #> 4 AAGCG… SeuratPro…        443           77 1               B             g1     #> 5 ACCAG… SeuratPro…        417           75 0               A             g1     #> # ℹ 8 more variables: RNA_snn_res.1 <fct>, PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, #> #   PC_4 <dbl>, PC_5 <dbl>, tSNE_1 <dbl>, tSNE_2 <dbl>  # sample by group pbmc_small |> slice_sample(n=5, by=groups) #> # A Seurat-tibble abstraction: 10 × 15 #> # Features=230 | Cells=10 | Active assay=RNA | Assays=RNA #>    .cell orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups #>    <chr> <fct>           <dbl>        <int> <fct>           <fct>         <chr>  #>  1 ATGC… SeuratPro…         70           47 0               A             g2     #>  2 AGTC… SeuratPro…        173           53 0               A             g2     #>  3 GCGC… SeuratPro…        213           48 1               B             g2     #>  4 CATC… SeuratPro…        353           80 1               B             g1     #>  5 TACT… SeuratPro…        156           48 0               A             g1     #>  6 GGCA… SeuratPro…        126           53 0               A             g1     #>  7 TTGC… SeuratPro…        104           40 0               A             g2     #>  8 ATAC… SeuratPro…        612           69 1               B             g1     #>  9 GTCA… SeuratPro…        210           33 0               A             g2     #> 10 TTAC… SeuratPro…        228           39 0               A             g1     #> # ℹ 8 more variables: RNA_snn_res.1 <fct>, PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, #> #   PC_4 <dbl>, PC_5 <dbl>, tSNE_1 <dbl>, tSNE_2 <dbl>  # sample using proportions pbmc_small |> slice_sample(prop=0.10) #> # A Seurat-tibble abstraction: 8 × 15 #> # Features=230 | Cells=8 | Active assay=RNA | Assays=RNA #>   .cell  orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups #>   <chr>  <fct>           <dbl>        <int> <fct>           <fct>         <chr>  #> 1 ATGCC… SeuratPro…         70           47 0               A             g2     #> 2 CATGA… SeuratPro…         51           26 0               A             g2     #> 3 AGATA… SeuratPro…        187           61 0               A             g2     #> 4 GGCAT… SeuratPro…        126           53 0               A             g1     #> 5 TACAA… SeuratPro…        108           44 0               A             g2     #> 6 CGTAG… SeuratPro…        371           75 1               B             g1     #> 7 GCACT… SeuratPro…        292           71 1               B             g2     #> 8 GATAG… SeuratPro…        328           72 1               B             g1     #> # ℹ 8 more variables: RNA_snn_res.1 <fct>, PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, #> #   PC_4 <dbl>, PC_5 <dbl>, tSNE_1 <dbl>, tSNE_2 <dbl>   # First rows based on existing order pbmc_small |> slice_head(n=5) #> # A Seurat-tibble abstraction: 5 × 15 #> # Features=230 | Cells=5 | Active assay=RNA | Assays=RNA #>   .cell  orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups #>   <chr>  <fct>           <dbl>        <int> <fct>           <fct>         <chr>  #> 1 ATGCC… SeuratPro…         70           47 0               A             g2     #> 2 CATGG… SeuratPro…         85           52 0               A             g1     #> 3 GAACC… SeuratPro…         87           50 1               B             g2     #> 4 TGACT… SeuratPro…        127           56 0               A             g2     #> 5 AGTCA… SeuratPro…        173           53 0               A             g2     #> # ℹ 8 more variables: RNA_snn_res.1 <fct>, PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, #> #   PC_4 <dbl>, PC_5 <dbl>, tSNE_1 <dbl>, tSNE_2 <dbl>   # Last rows based on existing order pbmc_small |> slice_tail(n=5) #> # A Seurat-tibble abstraction: 5 × 15 #> # Features=230 | Cells=5 | Active assay=RNA | Assays=RNA #>   .cell  orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups #>   <chr>  <fct>           <dbl>        <int> <fct>           <fct>         <chr>  #> 1 GAGTT… SeuratPro…        527           47 0               A             g1     #> 2 GACGC… SeuratPro…        202           30 0               A             g2     #> 3 AGTCT… SeuratPro…        157           29 0               A             g1     #> 4 GGAAC… SeuratPro…        150           30 0               A             g2     #> 5 CTTGA… SeuratPro…        233           76 1               B             g1     #> # ℹ 8 more variables: RNA_snn_res.1 <fct>, PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, #> #   PC_4 <dbl>, PC_5 <dbl>, tSNE_1 <dbl>, tSNE_2 <dbl>   # Rows with minimum and maximum values of a metadata variable pbmc_small |> slice_min(nFeature_RNA, n=5) #> # A Seurat-tibble abstraction: 5 × 15 #> # Features=230 | Cells=5 | Active assay=RNA | Assays=RNA #>   .cell  orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups #>   <chr>  <fct>           <dbl>        <int> <fct>           <fct>         <chr>  #> 1 CATGA… SeuratPro…         51           26 0               A             g2     #> 2 GGCAT… SeuratPro…        172           29 0               A             g1     #> 3 GACGC… SeuratPro…        202           30 0               A             g2     #> 4 AGTCT… SeuratPro…        157           29 0               A             g1     #> 5 GGAAC… SeuratPro…        150           30 0               A             g2     #> # ℹ 8 more variables: RNA_snn_res.1 <fct>, PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, #> #   PC_4 <dbl>, PC_5 <dbl>, tSNE_1 <dbl>, tSNE_2 <dbl>  # slice_min() and slice_max() may return more rows than requested # in the presence of ties. pbmc_small |>  slice_min(nFeature_RNA, n=2) #> # A Seurat-tibble abstraction: 3 × 15 #> # Features=230 | Cells=3 | Active assay=RNA | Assays=RNA #>   .cell  orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups #>   <chr>  <fct>           <dbl>        <int> <fct>           <fct>         <chr>  #> 1 CATGA… SeuratPro…         51           26 0               A             g2     #> 2 GGCAT… SeuratPro…        172           29 0               A             g1     #> 3 AGTCT… SeuratPro…        157           29 0               A             g1     #> # ℹ 8 more variables: RNA_snn_res.1 <fct>, PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, #> #   PC_4 <dbl>, PC_5 <dbl>, tSNE_1 <dbl>, tSNE_2 <dbl>  # Use with_ties=FALSE to return exactly n matches pbmc_small |> slice_min(nFeature_RNA, n=2, with_ties=FALSE) #> # A Seurat-tibble abstraction: 2 × 15 #> # Features=230 | Cells=2 | Active assay=RNA | Assays=RNA #>   .cell  orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups #>   <chr>  <fct>           <dbl>        <int> <fct>           <fct>         <chr>  #> 1 CATGA… SeuratPro…         51           26 0               A             g2     #> 2 GGCAT… SeuratPro…        172           29 0               A             g1     #> # ℹ 8 more variables: RNA_snn_res.1 <fct>, PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, #> #   PC_4 <dbl>, PC_5 <dbl>, tSNE_1 <dbl>, tSNE_2 <dbl>  # Or use additional variables to break the tie: pbmc_small |> slice_min(tibble::tibble(nFeature_RNA, nCount_RNA), n=2) #> # A Seurat-tibble abstraction: 2 × 15 #> # Features=230 | Cells=2 | Active assay=RNA | Assays=RNA #>   .cell  orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups #>   <chr>  <fct>           <dbl>        <int> <fct>           <fct>         <chr>  #> 1 CATGA… SeuratPro…         51           26 0               A             g2     #> 2 AGTCT… SeuratPro…        157           29 0               A             g1     #> # ℹ 8 more variables: RNA_snn_res.1 <fct>, PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, #> #   PC_4 <dbl>, PC_5 <dbl>, tSNE_1 <dbl>, tSNE_2 <dbl>  # Use by for group-wise operations pbmc_small |> slice_min(nFeature_RNA, n=5, by=groups) #> # A Seurat-tibble abstraction: 10 × 15 #> # Features=230 | Cells=10 | Active assay=RNA | Assays=RNA #>    .cell orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups #>    <chr> <fct>           <dbl>        <int> <fct>           <fct>         <chr>  #>  1 TGGT… SeuratPro…         64           36 0               A             g1     #>  2 GATA… SeuratPro…         52           36 0               A             g1     #>  3 AGGT… SeuratPro…         62           31 0               A             g2     #>  4 CATG… SeuratPro…         51           26 0               A             g2     #>  5 CTTC… SeuratPro…         41           32 0               A             g2     #>  6 GGCA… SeuratPro…        172           29 0               A             g1     #>  7 TTAC… SeuratPro…        228           39 0               A             g1     #>  8 GACG… SeuratPro…        202           30 0               A             g2     #>  9 AGTC… SeuratPro…        157           29 0               A             g1     #> 10 GGAA… SeuratPro…        150           30 0               A             g2     #> # ℹ 8 more variables: RNA_snn_res.1 <fct>, PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, #> #   PC_4 <dbl>, PC_5 <dbl>, tSNE_1 <dbl>, tSNE_2 <dbl>   # Rows with minimum and maximum values of a metadata variable pbmc_small |> slice_max(nFeature_RNA, n=5) #> # A Seurat-tibble abstraction: 5 × 15 #> # Features=230 | Cells=5 | Active assay=RNA | Assays=RNA #>   .cell  orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups #>   <chr>  <fct>           <dbl>        <int> <fct>           <fct>         <chr>  #> 1 TTGAG… SeuratPro…        787           88 0               A             g1     #> 2 TTTAG… SeuratPro…        462           86 1               B             g1     #> 3 GACAT… SeuratPro…        872           96 1               B             g1     #> 4 ACGTG… SeuratPro…        709           94 1               B             g2     #> 5 ATTGT… SeuratPro…        745           84 1               B             g2     #> # ℹ 8 more variables: RNA_snn_res.1 <fct>, PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, #> #   PC_4 <dbl>, PC_5 <dbl>, tSNE_1 <dbl>, tSNE_2 <dbl>"},{"path":"/reference/summarise.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise each group down to one row — summarise","title":"Summarise each group down to one row — summarise","text":"summarise() creates new data frame. returns one row combination grouping variables; grouping variables, output single row summarising observations input. contain one column grouping variable one column summary statistics specified. summarise() summarize() synonyms.","code":""},{"path":"/reference/summarise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise each group down to one row — summarise","text":"","code":"# S3 method for class 'Seurat' summarise(.data, ...)  # S3 method for class 'Seurat' summarize(.data, ...)"},{"path":"/reference/summarise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise each group down to one row — summarise","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... <data-masking> Name-value pairs summary functions. name name variable result. value can : vector length 1, e.g. min(x), n(), sum(.na(y)). data frame, add multiple columns single expression. Returning values size 0 >1 deprecated 1.1.0. Please use reframe() instead.","code":""},{"path":"/reference/summarise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise each group down to one row — summarise","text":"object usually type .data. rows come underlying group_keys(). columns combination grouping keys summary expressions provide. grouping structure controlled .groups= argument, output may another grouped_df, tibble rowwise data frame. Data frame attributes preserved, summarise() fundamentally creates new data frame.","code":""},{"path":"/reference/summarise.html","id":"useful-functions","dir":"Reference","previous_headings":"","what":"Useful functions","title":"Summarise each group down to one row — summarise","text":"Center: mean(), median() Spread: sd(), IQR(), mad() Range: min(), max(), Position: first(), last(), nth(), Count: n(), n_distinct() Logical: (), ()","code":""},{"path":"/reference/summarise.html","id":"backend-variations","dir":"Reference","previous_headings":"","what":"Backend variations","title":"Summarise each group down to one row — summarise","text":"data frame backend supports creating variable using summary. means previously created summary variables can transformed combined within summary, mutate(). However, also means summary variables names previous variables overwrite , making variables unavailable later summary variables. behaviour may supported backends. avoid unexpected results, consider using new names summary variables, especially creating multiple summaries.","code":""},{"path":"/reference/summarise.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Summarise each group down to one row — summarise","text":"function generic, means packages can provide implementations (methods) classes. See documentation individual methods extra arguments differences behaviour. following methods currently available loaded packages: dplyr (data.frame, grouped_df, rowwise_df), plotly (plotly), tidyseurat (Seurat) .","code":""},{"path":[]},{"path":"/reference/summarise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise each group down to one row — summarise","text":"","code":"data(pbmc_small) pbmc_small |> summarise(mean(nCount_RNA)) #> tidyseurat says: A data frame is returned for independent data analysis. #> # A tibble: 1 × 1 #>   `mean(nCount_RNA)` #>                <dbl> #> 1               245."},{"path":"/reference/tbl_format_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Format the header of a tibble — tbl_format_header","title":"Format the header of a tibble — tbl_format_header","text":"easier customization, formatting tibble split three components: header, body, footer. tbl_format_header() method responsible formatting header tibble. Override method need change appearance entire header. need change extend components shown header, override extend tbl_sum() class called default method.","code":""},{"path":"/reference/tbl_format_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format the header of a tibble — tbl_format_header","text":"","code":"# S3 method for class 'tidySeurat' tbl_format_header(x, setup, ...)"},{"path":"/reference/tbl_format_header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format the header of a tibble — tbl_format_header","text":"x tibble-like object. setup setup object returned tbl_format_setup(). ... dots future extensions must empty.","code":""},{"path":"/reference/tbl_format_header.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format the header of a tibble — tbl_format_header","text":"character vector.","code":""},{"path":"/reference/tbl_format_header.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format the header of a tibble — tbl_format_header","text":"","code":"# TODO"},{"path":"/reference/tidy.html","id":null,"dir":"Reference","previous_headings":"","what":"tidy for `Seurat` — tidy","title":"tidy for `Seurat` — tidy","text":"tidy `Seurat`","code":""},{"path":"/reference/tidy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tidy for `Seurat` — tidy","text":"","code":"tidy(object)  # S3 method for class 'Seurat' tidy(object)"},{"path":"/reference/tidy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"tidy for `Seurat` — tidy","text":"object `Seurat` object.","code":""},{"path":"/reference/tidy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"tidy for `Seurat` — tidy","text":"`tidyseurat` object.","code":""},{"path":"/reference/tidy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"tidy for `Seurat` — tidy","text":"","code":"data(pbmc_small) pbmc_small #> # A Seurat-tibble abstraction: 80 × 15 #> # Features=230 | Cells=80 | Active assay=RNA | Assays=RNA #>    .cell orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents groups #>    <chr> <fct>           <dbl>        <int> <fct>           <fct>         <chr>  #>  1 ATGC… SeuratPro…         70           47 0               A             g2     #>  2 CATG… SeuratPro…         85           52 0               A             g1     #>  3 GAAC… SeuratPro…         87           50 1               B             g2     #>  4 TGAC… SeuratPro…        127           56 0               A             g2     #>  5 AGTC… SeuratPro…        173           53 0               A             g2     #>  6 TCTG… SeuratPro…         70           48 0               A             g1     #>  7 TGGT… SeuratPro…         64           36 0               A             g1     #>  8 GCAG… SeuratPro…         72           45 0               A             g1     #>  9 GATA… SeuratPro…         52           36 0               A             g1     #> 10 AATG… SeuratPro…        100           41 0               A             g1     #> # ℹ 70 more rows #> # ℹ 8 more variables: RNA_snn_res.1 <fct>, PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, #> #   PC_4 <dbl>, PC_5 <dbl>, tSNE_1 <dbl>, tSNE_2 <dbl>"},{"path":"/reference/unite.html","id":null,"dir":"Reference","previous_headings":"","what":"Unite multiple columns into one by pasting strings together — unite","title":"Unite multiple columns into one by pasting strings together — unite","text":"Convenience function paste together multiple columns one.","code":""},{"path":"/reference/unite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unite multiple columns into one by pasting strings together — unite","text":"","code":"# S3 method for class 'Seurat' unite(data, col, ..., sep = \"_\", remove = TRUE, na.rm = FALSE)"},{"path":"/reference/unite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unite multiple columns into one by pasting strings together — unite","text":"data data frame. col name new column, string symbol. argument passed expression supports quasiquotation (can unquote strings symbols). name captured expression rlang::ensym() (note kind interface symbols represent actual objects now discouraged tidyverse; support backward compatibility). ... <tidy-select> Columns unite sep Separator use values. remove TRUE, remove input columns output data frame. na.rm TRUE, missing values removed prior uniting value.","code":""},{"path":"/reference/unite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unite multiple columns into one by pasting strings together — unite","text":"`tidyseurat`","code":""},{"path":[]},{"path":"/reference/unite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unite multiple columns into one by pasting strings together — unite","text":"","code":"data(pbmc_small) pbmc_small |> unite(   col=\"new_col\",    c(\"orig.ident\", \"groups\")) #> # A Seurat-tibble abstraction: 80 × 14 #> # Features=230 | Cells=80 | Active assay=RNA | Assays=RNA #>    .cell          new_col  nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents #>    <chr>          <chr>         <dbl>        <int> <fct>           <fct>         #>  1 ATGCCAGAACGACT SeuratP…         70           47 0               A             #>  2 CATGGCCTGTGCAT SeuratP…         85           52 0               A             #>  3 GAACCTGATGAACC SeuratP…         87           50 1               B             #>  4 TGACTGGATTCTCA SeuratP…        127           56 0               A             #>  5 AGTCAGACTGCACA SeuratP…        173           53 0               A             #>  6 TCTGATACACGTGT SeuratP…         70           48 0               A             #>  7 TGGTATCTAAACAG SeuratP…         64           36 0               A             #>  8 GCAGCTCTGTTTCT SeuratP…         72           45 0               A             #>  9 GATATAACACGCAT SeuratP…         52           36 0               A             #> 10 AATGTTGACAGTCA SeuratP…        100           41 0               A             #> # ℹ 70 more rows #> # ℹ 8 more variables: RNA_snn_res.1 <fct>, PC_1 <dbl>, PC_2 <dbl>, PC_3 <dbl>, #> #   PC_4 <dbl>, PC_5 <dbl>, tSNE_1 <dbl>, tSNE_2 <dbl>"},{"path":"/reference/unnest.html","id":null,"dir":"Reference","previous_headings":"","what":"Unnest a list-column of data frames into rows and columns — unnest","title":"Unnest a list-column of data frames into rows and columns — unnest","text":"Unnest expands list-column containing data frames rows columns.","code":""},{"path":"/reference/unnest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unnest a list-column of data frames into rows and columns — unnest","text":"","code":"# S3 method for class 'tidyseurat_nested' unnest(   data,   cols,   ...,   keep_empty = FALSE,   ptype = NULL,   names_sep = NULL,   names_repair = \"check_unique\",   .drop,   .id,   .sep,   .preserve )  unnest_seurat(   data,   cols,   ...,   keep_empty = FALSE,   ptype = NULL,   names_sep = NULL,   names_repair = \"check_unique\",   .drop,   .id,   .sep,   .preserve )"},{"path":"/reference/unnest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unnest a list-column of data frames into rows and columns — unnest","text":"data data frame. cols <tidy-select> List-columns unnest. selecting multiple columns, values row recycled common size. ... : previously write df %>% unnest(x, y, z). Convert df %>% unnest(c(x, y, z)). previously created new variable unnest() now need explicitly mutate(). Convert df %>% unnest(y = fun(x, y, z)) df %>% mutate(y = fun(x, y, z)) %>% unnest(y). keep_empty default, get one row output element list unchopping/unnesting. means size-0 element (like NULL empty data frame vector), entire row dropped output. want preserve rows, use keep_empty = TRUE replace size-0 elements single row missing values. ptype Optionally, named list column name-prototype pairs coerce cols , overriding default guessed combining individual values. Alternatively, single empty ptype can supplied, applied cols. names_sep NULL, default, outer names come inner names. string, outer names formed pasting together outer inner column names, separated names_sep. names_repair Used check output data frame valid names. Must one following options: \"minimal\": name repair checks, beyond basic existence, \"unique\": make sure names unique empty, \"check_unique\": (default), name repair, check unique, \"universal\": make names unique syntactic function: apply custom name repair. tidyr_legacy: use name repair tidyr 0.8. formula: purrr-style anonymous function (see rlang::as_function()) See vctrs::vec_as_names() details terms strategies used enforce . .drop, .preserve : list-columns now preserved; want output use select() remove prior unnesting. .id : convert df %>% unnest(x, .id = \"id\") df %>% mutate(id = names(x)) %>% unnest(x)). .sep : use names_sep instead.","code":""},{"path":"/reference/unnest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unnest a list-column of data frames into rows and columns — unnest","text":"`tidyseurat`","code":""},{"path":"/reference/unnest.html","id":"new-syntax","dir":"Reference","previous_headings":"","what":"New syntax","title":"Unnest a list-column of data frames into rows and columns — unnest","text":"tidyr 1.0.0 introduced new syntax nest() unnest() designed similar functions. Converting new syntax straightforward (guided message receive) just need run old analysis, can easily revert previous behaviour using nest_legacy() unnest_legacy() follows:","code":"library(tidyr) nest <- nest_legacy unnest <- unnest_legacy"},{"path":[]},{"path":"/reference/unnest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unnest a list-column of data frames into rows and columns — unnest","text":"","code":"data(pbmc_small) pbmc_small |>      nest(data=-groups) |>      unnest(data) #> # A Seurat-tibble abstraction: 80 × 8 #> # Features=230 | Cells=80 | Active assay=RNA | Assays=RNA #>    .cell        orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 letter.idents #>    <chr>        <chr>           <dbl>        <int> <chr>           <chr>         #>  1 ATGCCAGAACG… SeuratPro…         70           47 0               A             #>  2 GAACCTGATGA… SeuratPro…         87           50 1               B             #>  3 TGACTGGATTC… SeuratPro…        127           56 0               A             #>  4 AGTCAGACTGC… SeuratPro…        173           53 0               A             #>  5 AGGTCATGAGT… SeuratPro…         62           31 0               A             #>  6 GGGTAACTCTA… SeuratPro…        101           41 0               A             #>  7 CATGAGACACG… SeuratPro…         51           26 0               A             #>  8 TACGCCACTCC… SeuratPro…         99           45 0               A             #>  9 GTAAGCACTCA… SeuratPro…         67           33 0               A             #> 10 TACATCACGCT… SeuratPro…        109           41 0               A             #> # ℹ 70 more rows #> # ℹ 2 more variables: RNA_snn_res.1 <chr>, groups <chr>"}]
